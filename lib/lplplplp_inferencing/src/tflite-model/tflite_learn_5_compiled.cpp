/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.11.2023 04:28:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242704;
#else
constexpr int kTensorArenaSize = 241680;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036908881738781929, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[12] = { 20452, -27098, -32756, -28121, -27965, -27310, -31062, -31983, -30188, -31348, -27740, -30782, };
const TfArray<1, int> tensor_dimension2 = { 1, { 12 } };
const TfArray<12, float> quant2_scale = { 12, { 0.0002070470800390467, 0.00022550490393768996, 0.00021207852114457637, 0.00023563156719319522, 0.00023111034533940256, 0.00023669637448620051, 0.0002189911319874227, 0.00021330716845113784, 0.00022557847842108458, 0.0002169478393625468, 0.00023478646471630782, 0.00021161060431040823, } };
const TfArray<12, int> quant2_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[12*1*1*32] = { 
  /* [0][0][][] */ 95,-51,6,-33,-53,-10,-116,84,28,42,51,84,-108,-112,112,-78,-30,-45,-4,-29,-4,92,126,126,72,39,35,46,-3,127,75,2, 
  /* [1][0][][] */ 62,-8,124,-67,95,-107,28,-64,4,-53,-10,-1,100,127,-56,-36,29,46,5,10,-34,-66,53,55,3,-2,32,-94,75,-114,89,-30, 
  /* [2][0][][] */ -30,94,102,-108,-87,81,95,28,46,-107,89,-103,-121,-98,19,-35,125,-71,-13,-116,-101,91,-73,1,-26,113,64,-115,-100,39,-127,-19, 
  /* [3][0][][] */ 73,16,47,-93,73,-15,111,9,94,81,46,-127,-41,-92,-28,92,-69,115,33,-41,-54,70,104,-54,-5,-61,77,19,-113,35,-87,39, 
  /* [4][0][][] */ -33,127,-38,102,-38,28,26,-48,18,89,8,83,75,12,-29,87,-100,-40,32,26,-105,-58,7,-31,9,-92,-1,-24,-5,34,-92,-79, 
  /* [5][0][][] */ 78,-33,46,-79,-47,116,-46,-68,-72,-46,-15,16,127,-18,46,-49,74,6,-89,-52,86,34,117,57,-70,-62,-34,-84,-13,-59,80,115, 
  /* [6][0][][] */ 113,-27,50,94,91,60,-63,-20,-32,-14,79,-29,16,21,11,-81,-100,97,-2,65,-87,-70,-127,-18,-85,4,89,74,41,109,83,-123, 
  /* [7][0][][] */ -80,-18,-9,37,-19,118,-2,5,-6,-92,64,-89,60,-10,19,127,61,-14,47,-80,-53,19,73,123,-19,-74,75,67,-75,-7,61,92, 
  /* [8][0][][] */ -81,-35,127,81,14,-44,-15,91,12,-49,118,14,101,-4,43,-103,-78,56,-73,-14,-29,119,6,-46,-37,44,43,42,92,82,47,70, 
  /* [9][0][][] */ -81,47,-39,25,117,-94,13,-9,72,-117,-54,66,127,23,-31,113,68,85,-102,70,-97,-24,64,37,-33,-17,-46,76,94,-43,56,36, 
  /* [10][0][][] */ 24,-2,-63,-47,-84,74,-8,-21,89,10,127,-29,6,42,-84,30,-112,-26,-4,-103,-22,15,46,-18,4,104,12,-80,99,-77,40,-61, 
  /* [11][0][][] */ 88,127,8,123,-117,-86,-120,-19,-92,111,23,25,-9,89,57,-11,-113,-57,-98,66,95,61,127,-107,66,95,114,-110,34,-68,-37,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 12,1,1,32 } };
const TfArray<12, float> quant3_scale = { 12, { 0.0027301507070660591, 0.0029735381249338388, 0.0027964960318058729, 0.0031070697586983442, 0.0030474523082375526, 0.0031211103778332472, 0.0028876466676592827, 0.0028126970864832401, 0.0029745083302259445, 0.0028607035055756569, 0.0030959260184317827, 0.0027903260197490454, } };
const TfArray<12, int> quant3_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 543, 622, 418, 116, 40, -273, -380, -460, 277, -138, 513, 394, 543, 566, -206, 68, -539, 293, 360, -263, -382, 323, 612, -213, 125, -69, 465, -316, 340, -477, 289, -97, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3026633647968993e-05, 4.4405347580322996e-05, 4.2674131691455841e-05, 4.0280738176079467e-05, 4.1064489778364077e-05, 4.0221839299192652e-05, 4.2267911339877173e-05, 4.1829782276181504e-05, 4.304503818275407e-05, 4.1703518945723772e-05, 4.3401010771049187e-05, 4.2933148506563157e-05, 4.4422977225622162e-05, 4.4818247260991484e-05, 4.0674738556845114e-05, 4.2170267988694832e-05, 4.0736467781243846e-05, 4.2596144339768216e-05, 4.1427167161600664e-05, 4.0458129660692066e-05, 3.8559843233088031e-05, 4.2966708861058578e-05, 4.2130814108531922e-05, 4.1157312807627022e-05, 3.9836340874899179e-05, 4.008824544143863e-05, 4.3755342630902305e-05, 4.0783190343063325e-05, 3.9746162656228989e-05, 4.2421474063303322e-05, 4.1007268009707332e-05, 4.118034485145472e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -26,-39,115,20,102,-8,-77,-91,71,-92,-97,6,57,20,-25,65,-46,-21,-62,-48,-61,-92,16,119,-106,21,87,-39,117,4,-10,-72,92,-50,-85,72,-100,-70,-85,39,85,-75,-86,111,60,-97,118,-9,27,-55,-28,104,-68,-39,-86,115,32,76,127,-99,-67,92,-43,58,-2,26,82,105,60,108,94,-107,112,-93,49,96,-98,25,-49,41,63,32,101,5,-49,-32,-74,113,37,127,0,-108,21,74,37,30, 
  /* [1][0][][] */ -44,40,-75,9,-25,91,51,22,87,-88,-87,96,73,-11,35,78,119,-26,33,124,-32,9,50,41,45,30,-29,90,21,19,109,-50,65,116,4,31,63,73,-2,-50,-47,21,-9,-80,-34,50,-16,-39,-12,-81,124,71,18,96,-67,-44,41,111,63,95,-42,103,-50,-68,-42,48,88,53,115,40,32,24,-95,93,-34,57,95,-30,-26,79,-65,96,-38,-99,41,127,-52,-50,90,91,82,35,95,101,39,8, 
  /* [2][0][][] */ 53,46,-52,103,-20,-50,98,105,-95,95,-26,100,92,-6,91,-104,-49,-19,18,62,-88,-6,122,30,-19,90,111,1,-69,88,88,102,-61,-11,-86,-100,-78,104,116,-18,-109,-67,23,4,-78,127,-17,-68,109,28,92,-79,-50,72,30,24,-59,105,-60,14,-8,47,-27,70,101,55,58,97,-88,77,19,-63,44,-68,42,38,-45,-15,14,19,45,-88,0,-33,9,-89,-10,-23,100,122,-16,10,-36,-75,-40,-57, 
  /* [3][0][][] */ 86,3,45,-16,-72,61,-114,51,60,25,76,-9,101,109,85,11,113,106,-59,23,127,-88,-66,-115,-20,-115,-87,106,35,-97,92,15,-62,-32,-12,-14,-97,-21,53,59,-22,-94,-99,6,84,36,-46,-82,73,-99,50,4,103,36,100,-106,-118,-122,-122,-57,-99,26,-32,76,67,-30,-59,-26,-42,-72,7,112,27,-112,61,-48,42,108,110,-63,-92,-121,43,106,35,54,-42,-120,-85,53,6,-110,106,-100,-91,52, 
  /* [4][0][][] */ 52,113,8,62,-33,-31,35,25,66,96,-6,42,19,-37,-5,-73,-30,-12,-76,21,110,-91,90,31,-19,1,58,-68,-54,27,-78,-56,72,122,8,-101,-55,-6,-108,55,-51,-66,-73,-90,42,110,35,60,25,-46,-24,-92,-98,48,-82,29,31,-109,29,14,6,-83,-42,-73,-52,59,6,-33,24,-104,-112,-97,-57,29,103,62,61,-22,-5,-51,5,-51,-101,-22,0,72,96,1,-127,-77,56,46,27,100,-101,-19, 
  /* [5][0][][] */ 103,-99,73,80,45,-126,20,58,105,-127,-6,-83,27,98,29,35,57,58,-83,97,32,45,11,-38,-113,-73,-20,-104,43,37,17,-101,-39,-3,-88,21,-126,-43,49,19,-99,-55,37,105,-42,27,36,-63,-115,101,28,36,36,14,36,-31,114,51,-54,-52,33,-83,42,-81,-33,106,-39,25,69,-4,110,-73,-50,76,-36,-84,11,-62,6,81,110,42,26,119,-93,84,-13,42,70,-109,115,98,-25,19,73,-91, 
  /* [6][0][][] */ 15,-46,107,71,-90,-67,-8,63,-23,-86,3,-98,88,50,110,-126,36,-3,-6,101,-82,-127,105,54,-67,-85,-15,-69,-35,-114,43,-78,-94,-123,-52,-103,-15,38,-112,78,84,53,22,-19,-118,106,-91,-53,-91,13,-19,-69,55,-53,95,-30,4,-10,-58,109,-99,-7,67,-71,-48,63,95,-52,75,-6,-111,-9,55,-72,-97,-49,-82,-108,-63,-32,28,-33,40,-28,-78,-93,-44,-98,81,93,90,18,-58,-72,77,-26, 
  /* [7][0][][] */ 110,61,-48,-55,-82,108,-32,-12,111,-6,-111,27,50,-102,37,65,43,6,1,106,44,25,-17,78,-81,94,31,68,-92,99,-31,27,17,15,57,94,-119,79,-22,-39,87,-90,76,60,43,-14,95,-127,46,-58,-125,-82,-34,79,8,22,108,-104,-2,-70,-4,-5,71,-125,-82,-68,59,13,-124,10,57,75,76,16,50,51,-76,45,-113,38,83,-49,-31,-87,79,24,-124,85,72,-5,81,58,-70,-54,-14,-79, 
  /* [8][0][][] */ 23,39,-33,-75,57,19,-69,-23,16,31,56,90,2,-42,-76,-63,-80,99,-69,17,26,-22,81,110,-106,105,49,74,-78,19,-96,127,101,-24,37,1,109,8,-22,84,85,108,-109,-115,-4,-19,-18,97,32,-98,-57,-11,-71,-1,-27,-105,37,102,-87,98,113,33,46,108,-34,-37,-18,113,-95,52,23,-9,83,76,-2,34,-43,101,95,85,35,94,-122,-73,25,48,82,-31,27,-33,-77,107,-87,-110,-42,58, 
  /* [9][0][][] */ -2,10,115,44,98,-114,-56,-124,41,67,-13,68,-16,-79,-110,-17,9,-3,-87,-76,7,98,-107,-114,116,-12,-16,40,-6,-62,-88,100,66,-2,23,-15,-66,13,-33,-49,46,-69,54,-95,78,21,-111,53,54,-4,-87,-56,92,-81,-77,102,102,-48,-10,2,-94,111,85,-79,-91,3,103,45,-47,105,127,-85,21,79,-107,-93,-84,-115,-44,109,31,39,113,29,-48,-100,45,-19,103,30,-34,110,114,-5,60,-35, 
  /* [10][0][][] */ -49,91,104,-53,-2,112,119,38,50,28,36,-80,105,94,-23,24,-29,90,-109,-56,-11,41,68,-57,46,67,-104,-112,-50,89,-87,-70,98,111,123,78,-32,16,-23,47,-25,127,-104,-27,-88,-47,7,-54,11,-4,48,19,58,32,-56,-28,-95,-6,38,-33,7,64,122,45,126,-64,-84,-8,23,-15,-84,-56,98,75,-81,120,-4,74,79,34,84,14,52,115,-91,79,112,-13,41,18,5,-60,-42,-48,-37,-62, 
  /* [11][0][][] */ 113,19,-4,110,123,59,62,35,122,107,-73,127,6,-79,37,-58,-42,-91,78,53,41,85,34,-102,-100,-93,-10,85,94,-2,40,-18,-83,-67,67,55,-52,80,-26,-55,-20,110,-60,10,-31,-54,-87,-76,83,118,115,58,-78,-87,32,38,-55,-46,-16,-82,-74,103,84,23,34,92,-47,33,100,72,-73,-66,46,113,-86,61,-67,44,-37,97,-94,-20,-57,-42,57,-78,22,-25,-80,2,21,-95,-83,-20,-60,-26, 
  /* [12][0][][] */ 25,77,-41,14,94,9,-21,46,-66,67,-1,3,-33,25,58,-63,-83,-20,-54,-68,38,3,30,107,-52,-34,109,-109,97,26,-23,124,-70,-55,-41,25,9,-60,-5,54,123,52,-95,-26,-12,-68,-26,126,-31,-113,-60,114,37,13,-72,92,-9,-44,51,78,70,101,9,58,121,45,-32,127,61,111,53,83,94,120,-6,7,-21,47,-99,-79,-45,115,58,27,-23,44,65,124,-78,-93,100,52,112,-3,40,86, 
  /* [13][0][][] */ 119,-50,111,106,94,112,91,74,80,-104,25,-39,84,83,76,-33,-110,-56,-68,35,72,-13,127,-32,-51,52,17,8,-86,-76,74,47,51,113,-15,31,-80,-17,35,79,-49,88,-49,24,-33,40,10,-25,47,95,-23,-97,-95,40,103,-71,-46,37,-26,-57,-16,104,-61,11,-42,-47,-75,97,-28,-14,94,2,-75,45,-75,-27,-88,77,92,-48,58,-78,93,34,-68,-84,103,126,-9,-39,-61,59,120,-46,72,-12, 
  /* [14][0][][] */ -61,-101,89,69,84,-32,-21,-119,-87,-32,69,91,-31,-78,-100,-91,-59,-68,15,22,-42,31,-6,61,-125,-81,-40,31,-119,-123,-87,36,114,-28,-40,2,100,119,43,-123,-10,-122,33,92,67,-119,64,-94,126,45,82,51,108,-20,-21,9,-48,9,52,100,-14,-90,-20,74,-92,-17,78,-119,-99,-100,-92,101,5,83,50,-81,57,-117,54,38,44,-18,-117,-42,-127,-100,-119,112,114,4,91,-55,93,106,-22,64, 
  /* [15][0][][] */ 22,-23,-38,70,102,-82,59,-104,53,5,-68,5,120,10,-101,-103,99,21,-95,24,62,11,84,111,77,70,39,87,25,71,75,-90,4,19,-64,4,-60,127,111,-73,30,126,-42,-13,19,-67,-30,-78,-9,-78,10,44,-101,-91,-47,-12,76,68,-38,122,-33,-75,8,109,-21,112,-81,0,-60,14,77,-62,31,-18,67,-116,10,65,102,75,-82,69,-101,-52,-120,-31,-81,52,96,82,-122,-34,66,119,-101,121, 
  /* [16][0][][] */ -85,-7,97,-77,36,125,-69,32,40,51,-125,68,-11,-63,-65,-75,112,74,72,64,111,72,-52,44,-48,46,-83,59,-107,4,37,2,-121,70,58,57,-44,47,-62,-84,14,-60,71,86,58,97,98,-16,-71,-119,-5,109,-46,111,64,41,36,85,68,2,112,108,24,58,48,4,-50,85,50,100,-39,-20,20,88,70,80,-23,94,-127,-25,8,-100,71,0,4,94,96,-1,81,4,-23,111,64,-25,-94,30, 
  /* [17][0][][] */ 43,-100,42,91,-50,-123,-61,-89,49,-81,94,48,99,70,-107,55,38,59,100,114,-86,-6,22,-45,33,78,-77,29,105,-60,-25,83,-26,-15,23,17,-43,111,-82,-22,-87,-33,-5,-1,15,21,95,-107,96,106,-12,25,-18,87,103,-66,-127,95,-84,-107,40,-100,79,101,-82,-67,50,-96,-117,6,114,38,23,-111,-66,77,120,-41,50,-50,17,-10,-69,-86,-106,81,90,-27,27,84,-89,-117,-5,95,12,23, 
  /* [18][0][][] */ -91,116,124,-63,-2,-111,-99,15,3,86,-102,-39,-39,45,73,-51,32,-17,70,-20,111,-37,33,-74,39,-94,-8,127,37,34,12,49,60,-20,-107,-97,-21,43,-28,73,-34,8,-43,2,-106,25,32,5,32,-20,73,32,-102,-4,13,99,-39,40,-16,-112,94,124,15,48,-71,-116,-22,97,76,-75,-71,117,-93,-31,-82,-94,56,69,7,-65,-50,-1,-22,-62,115,-25,83,72,-105,-69,-55,112,96,-52,54,-18, 
  /* [19][0][][] */ 19,36,86,49,62,-91,99,97,107,-64,28,-2,-100,34,-59,61,75,-112,124,61,-25,83,-60,12,85,-83,28,-68,-91,-127,-69,45,89,-89,36,4,8,-75,-53,-107,45,-124,-88,8,-87,29,79,-100,-27,49,-37,45,-31,13,4,-6,22,102,-3,-30,58,-47,102,69,-77,-4,-29,0,-5,57,77,-55,-69,-122,-59,-80,-27,-121,14,123,59,-119,-31,79,-93,-10,8,-6,92,29,3,70,-34,119,71,-50, 
  /* [20][0][][] */ -18,74,70,97,-97,100,15,60,10,21,-102,18,-7,90,39,-87,-56,-45,-62,-37,21,-55,-89,-84,79,-87,-119,68,36,8,-43,119,105,43,-12,62,50,-41,-23,-127,-98,-45,-100,-118,-35,-77,-82,117,62,-122,-119,39,64,117,54,-4,102,77,103,93,118,-41,-81,-37,-35,-79,-62,9,-88,-84,-76,83,-76,-100,36,14,115,82,115,113,90,0,92,-33,62,122,-22,75,19,101,25,67,21,29,-10,5, 
  /* [21][0][][] */ 90,82,63,-113,101,-64,77,22,-8,-53,-70,47,14,45,-46,-86,-91,-20,22,-6,118,-43,79,-76,50,-91,-28,73,26,12,3,-17,-2,26,-81,-105,121,107,-112,-37,3,13,40,-5,-96,-76,-70,104,-29,-63,-7,97,43,75,-86,32,-40,62,-44,127,63,-75,18,-7,90,38,-33,-81,-94,9,70,87,38,-27,84,62,-105,-20,63,98,24,99,45,-72,36,-90,70,-79,-93,88,96,-107,-36,-55,73,-18, 
  /* [22][0][][] */ 48,-42,-65,-86,102,-44,126,73,-87,104,-62,-103,126,-100,-103,-73,54,101,-111,-52,105,-61,47,47,101,11,-104,110,-47,-66,-52,-98,56,78,31,26,18,-1,-47,-104,17,2,17,112,68,-104,109,-8,-54,-77,19,-3,-56,-79,-37,49,0,-16,-16,-16,127,-68,-64,-106,-53,34,-103,-34,127,122,-10,12,-54,17,82,-81,60,-38,80,107,124,-87,-63,-105,96,101,116,-19,-43,49,-63,75,34,35,-16,117, 
  /* [23][0][][] */ 60,-98,15,56,94,-126,-2,-107,55,-92,81,87,13,-120,18,-49,86,-44,-98,100,88,-91,101,-42,-19,-22,79,35,69,42,66,-52,-44,35,11,29,97,-17,-116,-1,-119,-9,0,-121,-70,-104,108,23,79,-117,-97,-64,85,-73,-54,94,-97,-32,102,39,-126,-92,-64,-18,27,30,-127,-120,57,-27,108,-85,-15,-37,-46,-98,38,-30,93,117,-63,-59,20,-119,91,0,110,-32,-103,38,119,-14,100,-62,-42,78, 
  /* [24][0][][] */ -82,-51,-102,-68,-87,-121,-70,-98,81,127,93,59,121,70,-35,-122,-86,50,39,-56,105,-82,-57,-37,67,-27,86,73,118,58,6,-68,7,13,61,33,-55,-91,70,-18,-78,-106,115,6,32,-39,47,79,-79,-48,-24,17,81,67,82,-75,-2,84,29,5,100,-1,39,109,-106,107,-43,-94,-109,60,-62,-28,-42,58,106,117,70,-79,-108,-81,-83,-99,-67,-124,5,71,-12,-107,30,-113,20,-86,-16,32,-99,37, 
  /* [25][0][][] */ -96,-65,-87,-13,99,-79,-113,55,46,-122,-44,13,75,-4,-124,-26,-80,60,33,-118,70,88,-14,-64,6,-59,-123,34,68,-97,39,120,93,-121,48,74,104,-69,-26,-24,-94,101,-119,1,102,41,67,36,-117,91,-81,2,45,-24,-72,7,-23,54,-122,79,124,33,55,38,-1,78,-21,-16,-104,-14,-28,-124,34,-127,76,22,75,76,13,17,48,52,-53,85,-85,-54,-113,-101,-27,-45,99,20,-127,-19,-26,-92, 
  /* [26][0][][] */ 66,-104,-7,3,-81,9,4,0,-93,-109,119,81,-69,-32,24,0,124,43,-76,-54,26,85,112,28,66,79,27,46,24,21,-79,12,-15,-46,-83,-92,-51,97,-37,122,-84,115,68,45,-60,85,-27,113,-8,35,7,112,19,-33,8,-93,108,77,66,39,16,-94,78,-10,127,-5,-40,72,-74,91,100,109,94,-80,-72,22,61,-92,-80,23,-16,90,93,-58,90,14,-29,28,-68,125,22,28,-41,125,62,98, 
  /* [27][0][][] */ 8,5,-71,-113,-117,-75,-78,-22,40,102,34,-112,-26,54,81,-36,64,-21,72,-92,-103,6,-35,-30,-115,42,-118,-2,63,24,-38,-14,60,67,-99,-94,-99,-73,-123,88,-104,13,25,13,99,21,67,103,90,78,57,-83,-87,-94,-11,-40,103,-30,-118,-87,-65,-54,-41,54,37,-54,-123,105,46,6,-127,3,59,-59,-12,-97,44,-74,87,103,85,-35,117,-64,-83,-91,-40,28,-55,-9,-42,-57,52,14,86,53, 
  /* [28][0][][] */ 106,-3,107,60,-114,-69,-95,-76,-32,-122,73,70,-88,-84,12,117,98,127,-83,75,-31,34,-109,-72,-117,97,-78,-65,-80,-77,-3,-12,-99,26,93,72,19,-111,-41,47,117,53,-105,58,-117,-4,20,49,36,-68,-77,-37,-94,33,54,38,65,-9,83,64,-1,-54,-96,6,65,87,-14,103,-83,25,-108,-41,84,46,-12,-96,-114,-63,-82,57,-79,-91,110,-22,71,-112,78,-80,-119,-70,-30,-67,-35,53,-100,-83, 
  /* [29][0][][] */ 45,47,48,-62,-95,8,-127,-2,92,-20,-98,-82,103,-113,-56,-56,-107,96,29,-69,-82,-43,46,-3,-42,0,-51,-16,-109,-14,98,-8,47,-6,-87,-60,-18,97,-18,87,42,99,-51,75,-5,99,-61,-33,11,-3,54,-101,68,-106,108,43,-101,49,-51,100,-124,102,-102,-53,-66,-71,44,81,91,-92,26,-79,103,73,56,16,109,-71,-39,26,-11,-94,-15,-85,57,109,36,72,-43,91,65,80,-112,12,-8,54, 
  /* [30][0][][] */ 36,-63,-57,46,-103,24,-59,-7,127,-21,7,-49,-105,24,70,12,-7,45,97,-100,48,-97,-112,22,-113,33,-65,119,-15,-114,-92,13,-84,-66,-120,-53,13,-10,-8,33,101,-72,-6,108,117,-39,115,70,-67,78,22,-106,98,-47,-3,115,-82,-58,-86,-61,-104,-7,-72,-32,-113,-84,-91,103,-60,123,49,-34,-94,119,41,-83,-58,-71,-71,-56,38,31,-105,-16,-104,37,-109,119,-35,-114,87,61,-33,1,14,-69, 
  /* [31][0][][] */ 87,-93,37,105,50,67,-63,-104,-31,-30,-82,-98,110,-127,-49,116,-61,-92,37,51,72,39,-30,112,43,-118,40,32,-77,-78,53,113,22,23,-101,-3,106,-31,-72,-117,65,-70,-29,37,6,-55,-39,24,77,21,104,-31,-124,-60,-84,28,-122,76,1,119,-40,-13,90,-77,71,118,-47,-84,75,-120,-119,14,-96,-42,0,7,-63,-46,52,99,-78,-50,66,77,61,103,-96,19,23,-53,-90,-59,12,112,-6,-27, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018286319682374597, 0.0018872271757572889, 0.0018136505968868732, 0.001711931312456727, 0.0017452407628297806, 0.0017094281502068043, 0.0017963862046599388, 0.0017777656903490424, 0.0018294141627848148, 0.0017723995260894299, 0.0018445429159328341, 0.0018246588297188282, 0.0018879764247685671, 0.0019047755049541593, 0.0017286763759329915, 0.0017922363476827741, 0.0017312999116256833, 0.0018103361362591386, 0.0017606546171009541, 0.0017194704851135612, 0.0016387932701036334, 0.00182608503382653, 0.0017905596178025007, 0.0017491857288405299, 0.0016930444398894906, 0.0017037504585459828, 0.001859602052718401, 0.0017332856077700853, 0.0016892118146643043, 0.0018029126804322004, 0.0017428088467568159, 0.0017501645488664508, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1577, 3715, 13586, 2879, -3033, -4762, 18911, 1822, 2564, -1602, 11127, -279, -9048, 2543, 16164, 7006, 14671, 4430, -3143, -6798, 5023, 23762, 23853, 19611, 1179, 821, 4548, 3214, 2609, -5057, 6279, -2471, -209, 5356, 0, 967, 8732, 4288, -1364, 4388, 8069, 6741, 4044, 10963, 4505, 4677, 1772, 8063, 4125, -5962, -6332, 847, -182, -1551, 2568, -14, 202, -1341, -4255, 13445, -812, 1607, -1295, -1591, -4177, 7765, 17281, 1733, -2646, 747, 1652, 2807, 1514, -1162, 712, 10492, -600, 14464, 15752, -1276, 8457, 1764, -505, 1318, 13392, 8020, 5865, 1577, 7559, 3866, -408, -7111, 936, -2165, -1530, -1571, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00038154286448843777, 0.00041986006544902921, 0.00017513164493720978, 0.00031250593019649386, 0.00034697703085839748, 0.00030692524160258472, 0.00017696669965516776, 0.00040337929385714233, 0.00023042246175464243, 0.0004004018846899271, 0.00018030429782811552, 0.00024544639745727181, 0.00028072655550204217, 0.0011232844553887844, 0.00019268797768745571, 0.00016322117880918086, 0.00012649751442950219, 0.0003240588994231075, 0.00062125100521370769, 0.00025219324743375182, 0.00012191701534902677, 0.0001131085300585255, 0.00012958585284650326, 8.6369982454925776e-05, 0.00016844562196638435, 0.00060523656429722905, 0.00065974332392215729, 0.00033304523094557226, 0.00020765465160366148, 0.00038937732460908592, 0.00023140788835007697, 0.00030861666891723871, 0.00024656543973833323, 0.0002164156612707302, 0.00032103396370075643, 0.00024133076658472419, 0.00021896150428801775, 0.00024823384592309594, 0.00045122354640625417, 0.00040634442120790482, 0.00015707408601883799, 0.00038816395681351423, 0.00036790754529647529, 0.00021014023513998836, 0.00042205711361020803, 0.00021139391174074262, 0.00027567701181396842, 0.00027166743529960513, 0.00033015495864674449, 0.00022242206614464521, 0.00024550946545787156, 0.00014975166413933039, 0.00073274399619549513, 0.00020583662262652069, 0.00029761376208625734, 0.00035523239057511091, 0.0004671337956096977, 0.00018992592231370509, 0.00036227292730472982, 0.00013766794290859252, 0.00090833893045783043, 0.00039161602035164833, 0.0002092361100949347, 0.00048926129238680005, 0.00044239021372050047, 0.00024944654433056712, 0.00012438070552889258, 0.00024353028857149184, 0.00043437242857180536, 0.000470124272396788, 0.00025690853362902999, 0.00019357282144483179, 0.00089384714374318719, 0.00035308761289343238, 0.00025424553314223886, 0.00020648606005124748, 0.00023839842469897121, 0.00012861291179433465, 0.00011639510921668261, 0.00015926643391139805, 0.00017233598919119686, 0.00020108123135287315, 0.00016905865049920976, 0.00018499200814403594, 0.00013460585614666343, 0.00029626864125020802, 0.00040418078424409032, 0.00018622410425450653, 9.1119443823117763e-05, 0.00053454656153917313, 0.00027432045317254961, 0.00028026543441228569, 0.00026337060262449086, 0.00046908212243579328, 0.00039523083250969648, 0.00023760767362546176, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -34,79,-11,-127,-48,-26,-25,-61,-10,7,-1,66,12,-61,-11,48, 
  /* [1][0][][] */ -36,25,-57,0,-24,-25,22,-82,66,50,-54,22,0,8,33,-127, 
  /* [2][0][][] */ -7,21,-29,56,59,28,-71,-64,127,-26,9,25,-14,120,-83,17, 
  /* [3][0][][] */ 38,-62,-7,-122,0,-19,-4,2,127,-16,65,33,-1,36,18,123, 
  /* [4][0][][] */ -80,58,14,41,6,-30,4,48,-1,14,16,-26,-127,-18,-19,30, 
  /* [5][0][][] */ 11,74,125,-2,16,86,-78,88,-65,78,-28,-42,36,-58,-127,31, 
  /* [6][0][][] */ 36,-52,98,-127,25,-3,-27,102,-65,-105,39,-44,-7,71,-8,88, 
  /* [7][0][][] */ 45,126,-30,-68,84,9,5,-42,127,86,-40,9,25,-35,70,55, 
  /* [8][0][][] */ 6,-77,15,-76,27,-52,12,-70,20,63,74,-2,17,127,71,51, 
  /* [9][0][][] */ 12,-31,-9,127,40,-15,46,-68,-67,114,27,-22,-8,-68,-4,-11, 
  /* [10][0][][] */ -22,17,-60,-127,12,14,-22,27,47,-50,15,-29,-10,-45,-16,21, 
  /* [11][0][][] */ 6,21,25,-23,80,-33,88,-60,-90,39,-5,27,-2,127,-68,-29, 
  /* [12][0][][] */ 69,-7,-127,-25,24,-81,35,34,8,50,-81,-59,-45,112,-2,31, 
  /* [13][0][][] */ -21,5,-30,7,1,-127,0,20,7,-16,5,-5,9,-18,12,15, 
  /* [14][0][][] */ 14,-28,87,-43,53,15,-127,-83,-8,-55,30,10,8,-62,-23,-19, 
  /* [15][0][][] */ -116,11,-11,-50,12,12,127,52,-33,34,100,-21,12,111,56,8, 
  /* [16][0][][] */ 27,48,127,100,-1,5,83,66,-102,25,-63,-1,7,11,18,-70, 
  /* [17][0][][] */ -39,-106,-16,32,-70,-24,-59,13,-127,-28,15,-46,-8,40,58,-42, 
  /* [18][0][][] */ 5,42,9,61,41,4,19,-5,66,38,-28,-29,15,127,55,21, 
  /* [19][0][][] */ 19,-23,49,20,118,19,-112,-74,-112,-75,-34,-127,-40,-43,-6,-44, 
  /* [20][0][][] */ 112,-20,-45,-18,20,-127,7,28,-67,52,-93,-1,42,7,25,-14, 
  /* [21][0][][] */ 53,-20,80,-3,-1,0,-12,93,-15,-80,74,45,-6,127,28,73, 
  /* [22][0][][] */ -39,46,-59,127,-75,8,116,91,6,22,-29,30,-18,-5,45,8, 
  /* [23][0][][] */ 89,0,100,-116,50,-33,4,66,12,12,-10,-40,9,-37,-127,36, 
  /* [24][0][][] */ -127,44,12,-13,2,108,30,-20,-10,28,104,-9,-82,16,65,-30, 
  /* [25][0][][] */ 20,19,10,17,9,12,63,-46,2,-127,-9,-19,-13,-29,10,19, 
  /* [26][0][][] */ -43,-10,-8,1,-56,-7,-39,-38,-108,-44,-2,-42,14,127,-36,61, 
  /* [27][0][][] */ -2,31,12,70,39,-33,-18,-31,53,10,-25,2,9,127,-8,11, 
  /* [28][0][][] */ 21,82,55,59,127,-14,42,45,-104,-21,-61,-43,14,93,57,-31, 
  /* [29][0][][] */ -2,-2,4,13,28,5,9,40,-20,-11,-14,-127,-6,-16,-16,8, 
  /* [30][0][][] */ -16,90,-45,82,-37,-22,39,-127,-52,65,-15,0,66,41,78,87, 
  /* [31][0][][] */ -44,-31,-14,-79,-7,0,-55,-118,32,77,-7,-127,-32,-41,2,16, 
  /* [32][0][][] */ -127,-73,-13,54,49,35,-9,8,-2,-44,-96,40,64,0,57,69, 
  /* [33][0][][] */ -4,-33,-33,-5,-95,-15,-78,9,56,20,15,-48,26,-117,127,39, 
  /* [34][0][][] */ 43,-12,72,30,52,22,-55,79,-80,-55,76,28,19,-1,-23,127, 
  /* [35][0][][] */ -45,56,-66,22,-6,-23,25,-119,82,93,-76,7,12,-2,74,-127, 
  /* [36][0][][] */ -22,43,17,127,29,15,114,18,-25,48,-27,-9,-4,15,-46,-42, 
  /* [37][0][][] */ 16,-3,17,-55,3,-7,-36,-44,-87,2,-2,-10,-4,-127,59,-42, 
  /* [38][0][][] */ 35,86,-14,-54,127,4,31,-38,115,66,-17,-7,9,-30,41,21, 
  /* [39][0][][] */ -36,55,-13,-127,-10,17,-45,26,54,-80,-18,-19,9,71,35,21, 
  /* [40][0][][] */ -5,-35,21,-88,0,-23,-13,-47,-127,-3,-5,-20,5,-109,92,-74, 
  /* [41][0][][] */ -17,-23,-53,-25,-3,-26,24,-5,-22,8,-52,-15,-127,5,24,37, 
  /* [42][0][][] */ 127,90,-18,-9,-62,-49,-29,-49,-5,31,87,-41,-55,54,87,-115, 
  /* [43][0][][] */ 0,127,-57,14,79,-34,95,-45,34,108,-35,12,38,-111,-86,-74, 
  /* [44][0][][] */ -14,-5,14,-30,60,-3,-91,-127,-25,0,17,11,5,-28,58,-69, 
  /* [45][0][][] */ -20,40,-127,-30,42,-82,10,-97,24,48,20,-69,38,-11,66,-41, 
  /* [46][0][][] */ 14,2,-13,-86,-8,8,16,-37,-127,-17,13,20,-5,-124,75,-40, 
  /* [47][0][][] */ 26,55,21,-21,127,-18,-22,21,-60,41,-5,17,1,-3,122,-23, 
  /* [48][0][][] */ -127,-77,-21,32,64,21,9,-18,7,-22,-101,43,54,11,73,49, 
  /* [49][0][][] */ 10,7,96,85,127,5,42,26,-119,-51,-31,-74,15,125,18,-65, 
  /* [50][0][][] */ 26,-13,-105,-22,22,-127,-36,-3,-24,-28,-8,-55,32,-29,-2,19, 
  /* [51][0][][] */ 16,33,35,4,20,-5,10,30,-127,65,-1,-117,5,-126,-16,96, 
  /* [52][0][][] */ 7,57,-4,50,44,-4,19,31,70,85,-31,-54,31,127,65,25, 
  /* [53][0][][] */ -1,-44,-15,-12,-90,-10,-83,-1,44,26,17,-53,32,-119,127,16, 
  /* [54][0][][] */ 47,-15,-35,17,127,81,-120,-54,-68,2,-23,-63,11,-33,-23,-48, 
  /* [55][0][][] */ 57,0,8,6,41,-48,-68,-127,-45,-68,-63,12,-3,-28,20,-9, 
  /* [56][0][][] */ -18,14,25,-18,-5,-24,-91,69,-11,127,-1,-13,26,7,-6,8, 
  /* [57][0][][] */ 7,24,-47,-19,-58,-54,127,97,-37,34,-18,-6,24,22,122,-6, 
  /* [58][0][][] */ 54,27,-127,41,98,106,-38,57,-116,-45,-2,11,-34,30,-6,-23, 
  /* [59][0][][] */ -90,71,102,23,-78,-68,126,127,13,11,23,-22,12,4,74,5, 
  /* [60][0][][] */ 13,0,-46,4,18,-127,-18,-4,-15,-9,-7,-17,29,-14,7,2, 
  /* [61][0][][] */ 20,-7,31,127,79,24,23,6,-98,-1,19,44,-8,25,31,-51, 
  /* [62][0][][] */ -56,127,13,-52,-31,-4,-69,54,-13,-71,-85,-58,-14,-96,-58,-42, 
  /* [63][0][][] */ -45,26,-29,127,-80,14,-72,-36,-61,-27,-26,-38,26,68,38,38, 
  /* [64][0][][] */ 14,-1,-3,34,-2,3,-10,58,21,-4,-22,-49,-17,-127,46,3, 
  /* [65][0][][] */ -7,-29,3,-127,32,-40,70,-26,-19,52,1,-122,-5,-8,26,-47, 
  /* [66][0][][] */ 22,-14,73,-7,15,14,-21,85,9,-51,50,42,15,127,5,54, 
  /* [67][0][][] */ -6,54,-21,-127,-18,0,-51,40,83,-96,-32,-12,24,70,63,34, 
  /* [68][0][][] */ -24,43,127,9,8,-2,1,7,-48,-16,-25,-38,8,-23,91,-29, 
  /* [69][0][][] */ 127,80,-23,-12,-90,-39,-16,-27,-6,13,74,-63,-61,43,71,-79, 
  /* [70][0][][] */ 40,3,-61,-17,-33,20,60,127,-32,82,-42,-1,6,55,-21,27, 
  /* [71][0][][] */ 10,3,-5,14,-1,-80,7,27,-41,21,-80,5,-127,-7,46,49, 
  /* [72][0][][] */ 7,13,-127,10,10,13,23,85,-33,-31,9,-9,16,14,-8,3, 
  /* [73][0][][] */ -55,22,38,-1,45,-42,-74,-127,21,-82,36,-23,13,-51,47,-10, 
  /* [74][0][][] */ 9,39,32,127,17,-15,-79,86,-71,16,-53,44,23,-125,42,-97, 
  /* [75][0][][] */ -6,30,-47,14,15,-4,12,-16,114,24,-12,2,7,127,-34,-3, 
  /* [76][0][][] */ 5,-10,1,22,5,-18,-14,65,12,-26,-19,-127,-8,-4,6,15, 
  /* [77][0][][] */ -15,33,-9,127,-40,20,69,87,10,35,-1,45,-3,-7,-17,-18, 
  /* [78][0][][] */ -10,-6,15,-127,48,-24,-25,36,34,-67,16,-42,17,127,22,47, 
  /* [79][0][][] */ -17,-100,-79,-55,-86,-11,28,-94,127,27,35,66,15,50,51,-61, 
  /* [80][0][][] */ -48,5,127,-88,27,-42,8,-114,-71,56,-37,-106,23,119,82,-59, 
  /* [81][0][][] */ -43,39,-127,20,60,-115,-9,58,-8,-48,54,-9,20,-3,14,3, 
  /* [82][0][][] */ 127,-6,-1,18,15,-111,-22,20,-21,-6,-102,-2,106,9,-7,29, 
  /* [83][0][][] */ -47,72,-116,-89,-28,-7,35,-127,76,41,-42,-118,21,56,41,98, 
  /* [84][0][][] */ -24,48,92,-27,15,-34,62,-127,-62,69,-4,-58,38,69,68,-13, 
  /* [85][0][][] */ -75,127,30,-113,-70,-37,-26,-1,-60,2,-69,24,2,-9,-92,-30, 
  /* [86][0][][] */ -3,3,-41,-7,-36,-31,127,22,6,-35,-8,2,8,24,84,-16, 
  /* [87][0][][] */ -28,-43,3,-127,11,-35,54,-17,0,15,-9,-124,-18,6,5,-36, 
  /* [88][0][][] */ 114,-24,63,3,41,-127,-14,29,-73,54,-127,-46,60,51,71,-13, 
  /* [89][0][][] */ 35,-18,-45,-48,23,-14,-20,-2,-61,16,31,-80,127,-14,38,-42, 
  /* [90][0][][] */ 1,-46,43,-54,69,-6,-68,81,52,-74,-37,-20,-12,120,13,-127, 
  /* [91][0][][] */ -38,-8,-18,-37,24,-23,-36,-107,2,71,-6,-127,-35,-11,0,10, 
  /* [92][0][][] */ -20,22,38,12,-4,-127,17,5,-1,-26,-3,-18,5,-30,23,11, 
  /* [93][0][][] */ 44,-19,127,-14,-58,51,36,-24,-27,31,-74,-22,-28,-5,36,9, 
  /* [94][0][][] */ 23,0,-22,-30,20,-8,-9,0,-29,-27,14,-68,127,-24,35,-26, 
  /* [95][0][][] */ 127,82,-8,28,-92,-21,-53,0,-29,-12,76,-45,-45,18,78,-65, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00099354621488600969, 0.0010933250887319446, 0.00045604674960486591, 0.00081377249443903565, 0.00090353598352521658, 0.00079924025340005755, 0.00046082527842372656, 0.0010504088131710887, 0.00060002529062330723, 0.0010426555527374148, 0.00046951646800152957, 0.00063914794009178877, 0.00073101825546473265, 0.0029250581283122301, 0.00050176383228972554, 0.00042503164149820805, 0.00032940236269496381, 0.00084385665832087398, 0.0016177515499293804, 0.00065671693300828338, 0.00031747465254738927, 0.00029453716706484556, 0.00033744447864592075, 0.00022490938135888427, 0.00043863619794137776, 0.0015760497190058231, 0.0017179864225909114, 0.00086725730216130614, 0.00054073741193860769, 0.0010139473015442491, 0.00060259137535467744, 0.00080364476889371872, 0.00064206193201243877, 0.00056355126434937119, 0.00083597964840009809, 0.00062843074556440115, 0.00057018070947378874, 0.00064640655182301998, 0.0011749962577596307, 0.0010581300593912601, 0.0004090244765393436, 0.0010107876732945442, 0.00095803954172879457, 0.00054720992920920253, 0.0010990462033078074, 0.00055047450587153435, 0.00071786914486438036, 0.00070742814568802714, 0.00085973093518987298, 0.00057919207029044628, 0.00063931220211088657, 0.00038995669456198812, 0.001908081816509366, 0.00053600320825353265, 0.00077499292092397809, 0.00092503317864611745, 0.001216426957398653, 0.00049457140266895294, 0.00094336690381169319, 0.00035849041887558997, 0.0023653351236134768, 0.0010197769152000546, 0.0005448555457405746, 0.0012740474194288254, 0.0011519941035658121, 0.00064956443384289742, 0.00032389015541411936, 0.00063415837939828634, 0.0011311155976727605, 0.0012242142111063004, 0.00066899560624733567, 0.00050406798254698515, 0.0023275981657207012, 0.00091944809537380934, 0.00066206109477207065, 0.00053769437363371253, 0.00062079488998278975, 0.00033491093199700117, 0.00030309549765661359, 0.00041473339661024511, 0.00044876680476590991, 0.00052362005226314068, 0.0004402325430419296, 0.00048172337119467556, 0.00035051666782237589, 0.00077149021672084928, 0.001052495907060802, 0.00048493177746422589, 0.00023727708321530372, 0.0013919712509959936, 0.00071433663833886385, 0.00072981748962774873, 0.00068582297535613179, 0.0012215004535391927, 0.0010291900252923369, 0.00061873573577031493, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9122, 16411, -18401, -2819, -10123, 10377, 27358, -55827, -1081, 16495, 24939, 15076, -11291, 10996, -6488, 13360, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00075522094266489148, 0.00039343349635601044, 0.0002043300773948431, 0.00023254200641531497, 0.00044415230513550341, 0.00037484406493604183, 0.00036175822606310248, 0.00028684554854407907, 0.00029232513043098152, 0.00024166377261281013, 0.00068055215524509549, 0.00058196397731080651, 0.0004008044779766351, 0.00025808444479480386, 0.00052436167607083917, 0.00054096215171739459, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -13,-16,8,-31,22,-1,-44,-6,14,6,-12,4,-7,-7,-32,1,-7,-1,-3,2,16,-32,10,2,6,15,8,127,30,-36,37,-10,-5,11,5,1,-14,9,-34,-8,-15,10,2,33,12,9,9,10,25,-3,-10,6,16,-18,-15,79,8,5,-31,-41,-8,24,-5,-25,-46,-69,-17,34,12,12,13,-11,-12,-29,-6,-22,-24,13,7,5,-7,-29,31,18,-9,-13,-14,-91,5,-13,2,-8,53,-38,-37,-8, 
  /* [1][0][][] */ 47,-78,-68,-58,127,-7,67,31,-17,-93,-64,-20,9,-8,-60,42,-75,8,42,53,26,33,-10,-63,11,-4,-7,-72,26,-24,-69,37,-21,40,3,0,14,-13,12,19,-37,34,-51,-17,-34,86,9,18,19,-87,21,-44,-25,51,49,16,-48,-28,-42,-33,20,-15,-3,-42,-83,100,-22,-24,0,-29,-28,21,59,-107,-33,1,43,-53,55,7,1,-30,35,-7,-62,25,-23,24,29,-43,0,5,33,5,33,105, 
  /* [2][0][][] */ -6,52,-85,-5,95,87,21,73,3,-102,8,-18,-10,-9,25,19,21,-26,-40,74,33,1,85,14,49,29,-4,-41,26,-19,51,-70,32,42,-22,36,-127,-85,37,20,3,-38,18,-29,28,-41,-7,79,-28,32,-33,-17,92,-4,-12,62,30,20,23,1,18,17,31,-38,13,-5,-30,-10,-39,13,-10,-31,-52,-73,4,68,72,43,30,-4,30,-57,13,-4,-46,32,16,31,-23,22,-1,-35,8,-34,-57,10, 
  /* [3][0][][] */ 71,12,90,1,50,-24,10,-5,-7,-66,27,-43,-9,38,37,88,33,-13,33,5,127,-16,41,10,55,-8,-9,28,24,31,4,72,-109,18,33,1,-21,-21,0,32,-79,-26,78,15,26,43,-49,-78,-54,-25,-52,31,-8,-115,-7,29,-102,80,46,33,18,92,-5,-55,28,64,-5,-54,26,-33,-2,-60,37,-31,43,-18,13,-7,54,45,-22,-79,24,-9,-33,19,26,30,17,23,13,24,42,106,46,-37, 
  /* [4][0][][] */ 18,-2,12,-13,127,28,-4,-11,-40,-39,-32,-30,-47,27,-11,45,29,-78,-33,74,-24,10,22,-14,5,-13,10,-36,14,-10,53,-29,79,14,-22,13,33,14,1,13,-23,-10,-24,-28,-11,-42,-14,2,40,14,-24,15,0,-40,15,-28,23,-15,-26,28,1,54,61,24,37,46,-25,2,-46,6,42,52,12,-68,-34,-24,23,30,71,-30,-4,-31,-2,-5,-61,13,41,50,-49,35,-4,-35,5,16,25,-24, 
  /* [5][0][][] */ 2,-9,-24,12,22,-24,37,-19,-20,-38,-12,4,-7,30,-1,12,0,0,13,-12,26,20,-48,72,18,-11,10,-101,0,28,19,35,0,1,6,-57,24,28,-15,9,-5,-14,29,-21,-13,6,8,-30,-14,-12,10,-11,3,-35,0,-55,-2,21,-16,20,73,17,7,32,-2,60,-3,73,7,101,20,23,13,5,-5,70,-37,-6,11,17,-7,-11,-7,27,-4,18,-6,127,-8,32,-5,-9,-4,22,-54,12, 
  /* [6][0][][] */ 29,-80,24,-34,-36,17,32,15,13,-7,-21,-67,-35,-7,-22,34,12,0,-5,-4,-36,27,14,4,-28,4,-12,-13,-23,8,39,-8,60,2,57,-8,1,-7,22,-91,-17,89,-2,-25,17,-17,-12,24,-19,29,-19,57,-26,-50,-16,-6,7,-52,-14,7,-13,60,32,-72,34,-30,6,-23,-3,-4,127,6,-33,11,-36,18,-71,-2,22,11,25,35,22,-2,-26,-2,39,14,10,1,51,-39,-12,-5,-31,-18, 
  /* [7][0][][] */ 12,127,57,8,120,60,47,-45,-24,-38,34,-17,-23,24,29,39,5,-32,-3,38,46,-42,45,4,-12,23,19,4,16,-25,5,14,54,-12,-53,0,32,14,0,83,-50,30,13,32,-6,-31,39,-14,-38,-40,41,2,16,-34,-42,57,49,7,-27,7,-20,-40,-13,0,-48,75,-31,-95,-3,-47,-4,71,-9,-27,11,17,70,71,51,-19,-53,-42,-5,-14,-26,55,-5,-9,-40,23,-30,-43,-49,-24,23,-2, 
  /* [8][0][][] */ -7,-2,51,14,-127,-37,44,-12,23,90,60,4,-13,17,24,16,-52,20,8,0,-51,-4,-125,65,18,-43,57,-12,7,7,-1,57,78,-20,-6,-8,-25,-10,-4,32,21,-41,38,12,-51,2,55,2,-108,11,31,31,-55,-38,-27,47,11,-61,-82,-14,20,-29,-25,-4,11,83,-8,-62,18,-16,-42,-32,49,49,57,-10,-18,-35,-20,22,-95,18,-26,-6,28,24,72,44,21,-42,57,59,-5,2,38,9, 
  /* [9][0][][] */ 7,-107,-29,33,108,94,-47,-27,39,-28,103,91,-21,21,88,-125,32,-48,8,15,-48,-43,44,-14,-19,3,2,35,-21,8,1,-14,8,27,-106,44,-15,4,-8,74,38,-67,-14,58,3,-27,-95,-36,31,42,-26,-90,67,20,-9,-56,-3,87,-9,-7,13,-64,-23,127,-106,-27,1,-13,2,44,-62,-76,36,6,8,31,56,-83,24,5,-2,-33,17,38,-9,-68,16,-10,12,-31,-73,31,-55,-18,-5,-36, 
  /* [10][0][][] */ -41,-21,-28,-39,-25,-2,61,-23,32,17,25,34,27,-12,-4,-5,-7,19,-24,-14,0,29,20,14,-11,-10,13,-127,23,-44,54,-34,-1,18,-4,-12,-5,26,4,-6,8,-30,22,-48,15,-8,24,16,-5,36,-26,-18,-34,-21,-8,-59,13,16,-7,-39,28,11,-5,10,-32,85,-11,-28,13,-26,-1,-13,-28,-3,19,56,-6,35,-19,14,-21,-2,9,24,5,-20,-10,113,-5,-4,12,9,24,-41,39,-30, 
  /* [11][0][][] */ -86,22,-3,-4,17,-66,-17,6,-46,-8,-2,15,22,21,-21,-3,46,7,-64,-51,15,-4,-13,4,66,2,56,4,-15,28,-35,23,-3,18,-13,-9,-7,10,15,7,-13,-10,8,9,70,19,76,16,48,41,-3,29,15,-60,20,-5,-71,-12,-32,-39,-1,-10,-6,19,1,-20,25,-1,18,9,-3,24,-20,6,26,4,-18,80,-127,67,-34,-5,-71,-67,123,25,43,-6,9,45,-27,-50,-29,49,-23,-8, 
  /* [12][0][][] */ -8,-9,-38,3,69,23,-2,-11,-17,23,26,-2,4,-15,24,-15,-24,-17,18,-13,-1,-16,-30,39,-20,38,-15,91,-13,32,-35,-1,-19,33,13,32,-22,-17,14,6,-3,-8,-3,6,-12,-2,15,17,-1,3,-6,-26,-20,4,-12,-9,-5,-8,13,16,-16,-24,4,46,34,-84,11,56,-27,-127,-2,57,-2,14,16,87,0,-19,-2,2,-1,19,-34,8,12,-16,1,-46,-2,13,2,-8,-33,28,-16,31, 
  /* [13][0][][] */ -78,68,-8,-10,-57,-4,-9,22,-42,-25,35,20,76,15,-19,7,-20,38,-46,-2,7,-7,41,-49,52,31,-6,6,16,-23,-29,-84,-80,-38,0,5,7,29,24,-9,-26,69,2,18,32,14,-5,5,58,-16,37,70,62,-54,74,-21,-28,47,47,12,16,33,-21,24,12,-13,-1,14,13,26,15,-127,20,-31,-67,11,53,47,-48,-48,76,-11,-7,-31,31,-35,93,10,-26,-2,-9,32,27,-32,-12,-2, 
  /* [14][0][][] */ -26,13,-9,-51,35,8,-7,22,-88,2,17,15,-24,-62,-79,-28,-83,-18,67,15,40,-9,23,-102,-39,25,-45,-23,10,-18,-11,-39,-68,-19,25,16,-18,-6,17,2,3,81,-77,-10,-41,17,7,15,127,-27,26,-12,25,54,-106,23,-16,23,-103,8,5,32,42,27,0,21,-1,7,-44,20,54,42,30,-1,-28,21,55,-74,-24,-97,13,-31,20,38,27,-74,-47,7,-36,22,31,41,23,30,16,-9, 
  /* [15][0][][] */ -43,-85,-2,-47,-4,3,1,-69,-21,11,0,-27,45,-21,55,-9,-103,4,-24,8,-25,2,-79,-37,-17,-3,-11,14,-25,-9,69,-88,1,21,15,-1,2,30,-102,-3,30,-78,-5,35,-33,-41,65,36,48,12,-3,-127,-3,54,-7,33,30,-12,-27,51,7,4,37,2,11,-2,-7,-10,-27,28,5,30,-34,-1,-3,-35,-26,-2,2,9,-11,48,-15,66,-8,-37,-28,-28,-40,53,39,91,-48,-2,1,-20, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032096888870000839, 0.016720922663807869, 0.0086840279400348663, 0.0098830349743366241, 0.018876472488045692, 0.015930872410535812, 0.015374724753201008, 0.012190936133265495, 0.012423817999660969, 0.010270710103213787, 0.028923466801643372, 0.024733468890190125, 0.017034189775586128, 0.010968588292598724, 0.022285370156168938, 0.022990891709923744, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 17185, 63851, -1467, -209, 14485, -8138, 1089, -570, 5709, 15467, -3885, -157, 674, 6398, 5059, -8710, -3878, -491, -377, 16574, -9716, 14172, -2271, 7623, 18763, -26, -7157, 16795, 13974, -19493, 1891, 22151, 24101, -9874, 1998, 338, -169, -998, 4452, -7113, -5331, -958, -9003, 518, 30464, -1055, 13500, -928, -14914, 2692, -15, 283, -2397, 20885, -2414, 15128, 25589, -394, 35071, 197, -8929, -648, 872, 315, -1287, 13414, -1258, -4944, -2540, 3134, -350, -3930, 1215, 14, -1142, -6366, 486, -1703, 43752, -7401, -5821, -10971, -292, -33, 61206, -12284, -10052, -27706, -7736, 9658, -2021, 39839, 576, -1644, -3315, 849, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013408383529167622, 8.9139342890121043e-05, 0.00011963226279476658, 0.00022141513181850314, 0.00023720329045318067, 9.4180082669481635e-05, 5.0477203330956399e-05, 9.7128970082849264e-05, 0.00024840843980200589, 0.00015661885845474899, 0.00028579126228578389, 0.00012417204561643302, 0.00025844047195278108, 0.00021866119641344994, 0.00040243359399028122, 0.00016720595885999501, 0.00017850335279945284, 0.0002040114050032571, 0.0001860311022028327, 6.5223248384427279e-05, 8.1852238508872688e-05, 4.3235431803623214e-05, 0.00013942905934527516, 9.7631411335896701e-05, 8.2488724729046226e-05, 0.00010143763938685879, 0.00015515403356403112, 0.00018356945656705648, 7.3306342528667301e-05, 0.0004421992925927043, 0.00036088106571696699, 0.00023852668527979404, 0.00013721421419177204, 0.00015647828695364296, 0.00024500372819602489, 0.00046816971735097468, 0.00037741736741736531, 0.00016239058459177613, 0.0002256344014313072, 0.0001161812906502746, 0.00021055739489383996, 0.00023751682601869106, 0.00034248246811330318, 8.0997946497518569e-05, 0.00037018430884927511, 9.8905562481377274e-05, 0.00011916693620150909, 0.00028132638544775546, 0.00067494489485397935, 0.00011029435700038448, 0.00035991231561638415, 0.00017732928972691298, 0.00020659290021285415, 0.0001317612623097375, 0.00035436236066743731, 0.00012194879673188552, 0.00010582715913187712, 0.00041332360706292093, 4.4166423322167248e-05, 0.00016263712313957512, 0.00028480793116614223, 0.00034807261545211077, 0.0001013303772197105, 0.00017708998348098248, 0.00013572025636676699, 0.00012924836482852697, 0.0002876480866689235, 0.00043882723548449576, 0.00019989954307675362, 0.00012695051555056125, 0.00019209148013032973, 9.74495560512878e-05, 0.00025637584622018039, 0.00014712540723849088, 0.00061622797511518002, 0.00029323060880415142, 0.00012828160834033042, 8.6267311417032033e-05, 5.893730849493295e-05, 0.00016428166418336332, 0.0002225182979600504, 0.0002353750605834648, 0.00016102699737530202, 0.00026778547908179462, 5.790797877125442e-05, 0.000130073371110484, 8.2403086707927287e-05, 0.00048277480527758598, 0.00022839178564026952, 0.00012891140067949891, 0.00039738052873872221, 2.5070294213946909e-05, 0.00016101001529023051, 0.00011105685553047806, 0.00029893321334384382, 0.00025356438709422946, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -47,-71,-11,127,21,70,76,-57,-14,-18,-15,-6,-30,-1,36,1,-9,-42,27,22,19,-127,127,6,-85,9,49,-28,-127,-127,39,23,14,25,61,-18,-29,-10,30,-7,-13,28,-107,69,25,-69,38,46,-17,51,-25,19,3,-6,15,48,-89,-49,-62,-19,-12,0,11,38,69,-24,75,13,-9,17,19,127,24,22,26,-1,-11,18,127,-7,-15,14,-26,21,125,21,-75,-17,-1,-32,-14,-38,1,-25,-16,25, 127,-127,74,104,-44,127,40,-116,68,5,-17,127,127,-98,-13,15,11,127,127,-113,127,-77,82,69,-127,-117,-64,-34,-57,45,-59,-20,-90,52,-127,-83,-43,-15,-54,61,0,127,127,79,-52,-115,-111,-49,-15,-127,42,84,68,-31,46,81,-47,43,-79,-114,-45,-41,-61,68,74,-61,25,30,-82,33,-17,89,118,127,13,19,1,59,-34,52,66,127,127,-23,-8,74,-112,127,-123,-100,5,-127,-91,-127,-39,105, -76,-12,29,-81,14,-23,66,-8,79,-34,-27,17,-19,-6,-8,-13,-9,-16,8,-4,-21,-104,30,-1,-124,99,8,-54,116,49,-15,9,2,15,14,-29,-9,34,19,11,25,13,-118,64,17,-19,37,14,-14,10,-17,5,-11,1,-3,20,-65,7,-34,51,2,41,34,-2,-6,-38,-31,23,9,3,-3,35,10,-27,-6,3,-12,-5,-85,2,-21,-24,-17,3,-109,9,-34,-22,-52,24,-24,-30,29,-26,-14,1, 
  /* [0][1][][] */ -65,-74,74,-35,-49,90,17,127,-51,-22,-1,-121,26,-115,77,30,-3,-59,-16,89,53,-70,48,49,-96,-12,127,-22,-25,63,120,-105,-127,89,-87,-55,-35,31,-29,95,-49,-25,-4,47,-48,127,-23,64,16,94,20,-3,14,-54,26,31,127,123,-72,-85,127,-33,-35,127,72,-37,-14,-2,126,40,127,97,-41,102,-6,12,14,14,-32,9,-44,120,-78,111,0,34,-55,29,78,-127,-31,-6,127,-69,-24,0, 67,125,57,-115,127,80,89,38,-127,127,127,-40,-66,-127,-127,127,127,-63,-122,-51,102,97,-121,127,-107,-91,-42,127,-127,108,-127,-127,-91,127,106,127,127,-127,-106,127,-65,-95,110,-127,-127,-37,-127,-127,127,-112,86,42,127,127,127,-127,99,-127,-127,127,20,-79,-127,-100,-127,127,-127,127,-127,-127,-106,-81,-127,-80,127,127,-127,127,-78,127,127,28,-40,-127,59,127,93,45,127,13,127,1,-68,36,127,-127, -54,-13,-49,38,-57,-94,35,-27,18,-34,-29,93,1,91,14,9,-4,63,-6,127,1,-86,-40,6,-74,106,-69,-19,-69,-17,16,-63,-71,38,5,-16,-29,44,-68,41,127,-4,-39,29,-41,-61,15,44,8,117,-11,6,-38,-72,3,18,95,3,0,21,-35,127,93,-53,-42,13,39,-11,-79,123,-18,-85,-1,-55,-18,-21,26,16,78,-36,-71,-43,57,15,-47,-17,71,22,14,62,-42,21,-44,97,-27,-5, 
  /* [0][2][][] */ -66,1,-3,-20,14,-46,67,25,55,-28,-36,-3,19,17,-26,0,-6,65,7,0,-55,-82,1,-9,-28,-54,36,-69,88,39,25,26,17,-10,-11,-45,-6,35,-4,0,-15,-6,-66,103,3,30,11,35,-16,-32,11,-20,22,-1,9,14,-69,25,-14,14,15,1,-20,-5,-1,-46,-47,15,-34,13,25,29,13,-19,28,4,16,5,-78,-12,-9,-8,17,14,-127,7,12,-43,-60,-52,-26,-47,8,58,-19,-8, 123,33,-127,-35,-72,-27,40,30,-64,-28,-19,-110,-78,110,-12,35,3,-49,-10,-127,89,-51,-38,0,-109,127,-49,20,-36,-21,-10,-4,-64,15,27,6,-23,-28,127,53,11,-14,69,-34,-39,76,-68,-43,-34,-6,-127,-127,-51,-26,1,38,-66,-6,13,38,-8,-18,10,-48,-54,32,64,-23,114,109,-24,-71,11,-59,3,4,98,4,52,22,11,-96,-50,2,2,8,127,40,-63,38,-18,-109,40,81,-10,26, -53,13,-17,26,16,-65,-127,1,-10,-8,-16,3,16,-27,19,-3,-8,-16,5,16,-50,-72,14,0,16,-95,21,3,-48,-39,-8,16,44,-21,-7,-24,-35,3,42,-42,23,-2,-49,-34,2,65,23,15,-9,-5,10,-8,18,5,-5,-6,-62,-12,3,-38,-11,10,86,-11,34,-2,-1,28,0,6,-4,19,-18,15,-1,15,35,1,76,-12,2,-10,-9,-17,74,0,42,-38,58,39,-16,-52,-7,2,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.005698563065379858, 0.0037884220946580172, 0.0050843711942434311, 0.0094101428985595703, 0.010081139393150806, 0.0040026535280048847, 0.0021452810615301132, 0.0041279811412096024, 0.010557358153164387, 0.0066563012078404427, 0.012146128341555595, 0.0052773118950426579, 0.010983719490468502, 0.0092931007966399193, 0.017103428021073341, 0.007106252945959568, 0.0075863925740122795, 0.008670484647154808, 0.0079063214361667633, 0.0027719880454242229, 0.0034787200856953859, 0.0018375058425590396, 0.005925734993070364, 0.0041493349708616734, 0.0035057705827057362, 0.004311099648475647, 0.0065940460190176964, 0.0078017017804086208, 0.0031155194155871868, 0.018793469294905663, 0.015337444841861725, 0.010137383826076984, 0.005831603892147541, 0.0066503267735242844, 0.01041265856474638, 0.019897213205695152, 0.016040237620472908, 0.0069015994668006897, 0.0095894616097211838, 0.0049377046525478363, 0.0089486893266439438, 0.010094464756548405, 0.01455550454556942, 0.0034424127079546452, 0.015732832252979279, 0.004203486256301403, 0.0050645945593714714, 0.011956371366977692, 0.028685158118605614, 0.0046875099651515484, 0.015296272933483124, 0.0075364946387708187, 0.0087801981717348099, 0.0055998535826802254, 0.01506040059030056, 0.0051828236319124699, 0.0044976542703807354, 0.017566252499818802, 0.0018770729657262564, 0.0069120777770876884, 0.012104337103664875, 0.014793085865676403, 0.0043065408244729042, 0.0075263241305947304, 0.0057681105099618435, 0.00549305509775877, 0.012225043028593063, 0.018650157377123833, 0.008495730347931385, 0.0053953970782458782, 0.00816388800740242, 0.0041416059248149395, 0.010895973071455956, 0.0062528299167752266, 0.026189688593149185, 0.01246230024844408, 0.0054519679397344589, 0.003666360629722476, 0.0025048356037586927, 0.0069819707423448563, 0.0094570275396108627, 0.010003440082073212, 0.0068436474539339542, 0.011380882933735847, 0.0024610890541225672, 0.0055281179957091808, 0.0035021309740841389, 0.020517928525805473, 0.0097066508606076241, 0.0054787346161901951, 0.016888672485947609, 0.0010654875077307224, 0.0068429252132773399, 0.0047199162654578686, 0.01270466111600399, 0.010776486247777939, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1924, 7713, 16466, 27254, 17790, -3671, -2721, 5990, 28443, -4753, 13476, 4732, 7333, 14412, 29917, 1375, 2678, 10539, 20398, 5872, -292, 381, 15234, -1126, 6425, 35, 13043, 7938, 5776, 41472, 52530, 21279, 6287, -655, 10732, 2653, 1169, 3728, 23529, -881, 14823, 12070, 43685, -3142, 28463, 10341, 5889, 16185, 74153, 13471, -555, 10285, -3648, -177, -2965, 7656, -440, 13731, 6671, 10330, 5164, 17026, 9026, 7194, 13033, 9130, 5311, -7998, 8077, -2761, 6115, 13109, 21936, 6628, -4715, -5665, 7178, 358, 2267, -1036, 17174, 15641, 5216, 22579, 2503, 294, 12398, 84684, 10735, 12714, 6469, -194, 7045, 8748, 4743, 11498, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001958037173608318, 0.0001928658748511225, 0.00011438440560596064, 8.4640363638754934e-05, 0.00016656366642564535, 0.0002783968229778111, 0.00029720616294071078, 0.00026997338864021003, 8.2100472354795784e-05, 0.00028990494320169091, 0.00019796668493654579, 0.00018960716261062771, 0.00017545280570629984, 0.00016180158127099276, 7.9195400758180767e-05, 0.00040611877921037376, 0.00017319030303042382, 0.00011732019629562274, 0.00010942199878627434, 0.00020491056784521788, 0.00030541096930392087, 0.00062005250947549939, 0.00013037185999564826, 0.00055215309839695692, 0.00040667850407771766, 0.00025961559731513262, 0.00017137420945800841, 0.00017822749214246869, 0.00027900942950509489, 8.5198669694364071e-05, 5.395208063418977e-05, 0.00011677991278702393, 0.00026685174088925123, 0.00032984494464471936, 0.00018622497736942023, 0.00021550495875999331, 0.00042999006109312177, 0.0003991307457908988, 0.00011590900976443663, 0.00061564287170767784, 0.000125931590446271, 0.0001312960812356323, 6.1747748986817896e-05, 0.00033130880910903215, 0.00011460092355264351, 0.00015079342119861394, 0.00029890501173213124, 0.00016587533173151314, 5.5839547712821513e-05, 0.00015701097436249256, 0.00023622118169441819, 0.0001690251228865236, 0.00028711100458167493, 0.00026922087999992073, 0.00035016433685086668, 0.00014621416630689055, 0.00020129657059442252, 0.00013532910088542849, 0.00030436628730967641, 0.00014223381003830582, 0.00030930928187444806, 8.2021528214681894e-05, 0.00016149970178958029, 0.00013769729412160814, 0.00018846678722184151, 0.00021041191939730197, 0.00024310313165187836, 0.00016604224219918251, 0.00021097647550050169, 0.00025349421775899827, 0.00018264773825649172, 0.00012118597805965692, 9.5786985184531659e-05, 0.00015796230582054704, 0.00032836452010087669, 0.0002395605988567695, 0.00023429469729308039, 0.00030516483820974827, 0.00033944120514206588, 0.00038530651363544166, 0.0001192300915136002, 0.00010565335105638951, 0.00016366310592275113, 8.6577820184174925e-05, 0.0004618312232196331, 0.00028972182190045714, 0.00018790470494423062, 4.5719640183961019e-05, 0.00013359532749745995, 0.00017916427168529481, 0.00019265309674665332, 0.00032493277103640139, 0.0002097182150464505, 0.00018270801228936762, 0.00024000872508622706, 0.00015005435852799565, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 10,80,-30,80,26,25,11,-10,28,44,-69,123,5,-125,53,-127, 
  /* [1][0][][] */ 27,42,-17,-19,24,-28,127,-105,-3,79,-19,-13,3,-51,25,8, 
  /* [2][0][][] */ -127,35,-46,-29,-4,0,62,78,-38,43,103,-23,-64,13,28,-60, 
  /* [3][0][][] */ -61,72,32,55,-54,60,83,127,16,50,-102,23,57,-83,-73,-74, 
  /* [4][0][][] */ 12,7,42,70,-15,63,-12,42,9,-12,5,-3,22,-2,-127,-14, 
  /* [5][0][][] */ 3,-22,45,-26,-2,-27,1,34,-67,84,-36,-127,-16,14,-47,-14, 
  /* [6][0][][] */ 18,-7,29,-19,39,61,-75,-82,-3,-6,46,-21,127,-23,-13,-31, 
  /* [7][0][][] */ 22,13,127,-5,-13,-38,3,-14,-73,30,-72,-40,8,-2,27,-22, 
  /* [8][0][][] */ 8,23,70,53,-74,87,32,65,30,-9,1,-112,-42,-6,-127,-78, 
  /* [9][0][][] */ 39,-127,62,65,2,-36,8,38,125,14,79,14,-39,3,-122,-46, 
  /* [10][0][][] */ -32,-122,-4,-31,-100,-1,-33,50,125,127,35,-28,-36,86,100,11, 
  /* [11][0][][] */ 50,-32,6,-116,5,-21,-120,-127,-67,31,-6,-44,32,-33,45,-56, 
  /* [12][0][][] */ -3,0,7,-23,-18,-39,-99,-29,-29,-58,-12,27,21,127,73,31, 
  /* [13][0][][] */ -26,-90,-67,22,-19,-64,7,-15,44,21,-17,-22,15,9,127,37, 
  /* [14][0][][] */ 6,-46,71,42,25,30,-2,127,10,67,7,-30,13,44,-75,114, 
  /* [15][0][][] */ 14,-38,-1,54,13,0,94,0,8,-127,14,-36,-1,-23,-5,-34, 
  /* [16][0][][] */ 50,-79,-38,19,21,-1,34,-57,116,57,103,8,4,110,67,127, 
  /* [17][0][][] */ -68,-62,45,127,111,41,3,-33,125,-33,-7,-38,13,45,-96,31, 
  /* [18][0][][] */ -23,17,12,16,-115,10,-22,57,-84,-30,-29,-62,9,-127,64,11, 
  /* [19][0][][] */ 45,-70,29,-74,81,15,-79,77,85,-73,79,39,-29,52,50,127, 
  /* [20][0][][] */ 47,-15,59,-63,-15,2,-25,54,-21,-41,82,-20,6,6,-38,127, 
  /* [21][0][][] */ -59,-15,2,-34,12,7,-71,-40,-30,61,0,8,-127,-14,29,-3, 
  /* [22][0][][] */ 18,-27,35,-37,9,-69,13,-8,-127,28,-12,-54,-25,-11,86,-14, 
  /* [23][0][][] */ 12,9,21,-9,9,8,-8,9,-12,-8,49,-12,127,-1,-1,-33, 
  /* [24][0][][] */ -9,-4,6,-62,-30,-12,39,0,-52,-6,-16,-127,7,-107,45,10, 
  /* [25][0][][] */ -86,3,-64,-13,58,-34,-54,-127,-35,57,-38,-56,-79,-90,24,-46, 
  /* [26][0][][] */ 31,1,60,-100,127,-18,-12,7,119,-47,26,-17,-12,113,-7,76, 
  /* [27][0][][] */ 97,-24,24,-23,-28,-48,-6,-22,-24,24,-127,18,18,-13,-3,36, 
  /* [28][0][][] */ -101,-10,-127,-78,35,-19,78,-47,9,62,-58,6,46,-17,-23,38, 
  /* [29][0][][] */ -67,-32,2,127,-4,15,0,-42,-16,-5,-70,39,24,-72,23,-43, 
  /* [30][0][][] */ 54,-15,127,-12,62,35,-34,60,-36,-67,65,-28,-19,33,-70,68, 
  /* [31][0][][] */ 17,-92,-6,-54,-9,-67,27,-47,-7,46,100,15,-15,89,76,127, 
  /* [32][0][][] */ -8,76,-32,38,-127,17,-65,-34,-61,-27,2,50,11,46,38,61, 
  /* [33][0][][] */ 36,-14,22,127,13,-8,31,-39,-106,57,59,-27,0,-4,14,111, 
  /* [34][0][][] */ 35,-8,10,-14,66,-54,-127,-21,-55,96,-42,0,-35,2,8,6, 
  /* [35][0][][] */ 76,25,-8,5,28,-127,-39,-11,-27,-4,-92,5,92,23,-11,12, 
  /* [36][0][][] */ 18,-5,-127,2,42,10,-25,29,-31,-26,-3,-16,0,8,-20,4, 
  /* [37][0][][] */ 10,4,127,-9,-59,19,15,-73,-9,36,-47,28,22,-2,22,5, 
  /* [38][0][][] */ -127,33,-9,24,23,79,14,-25,14,-17,107,-26,-28,9,-13,-32, 
  /* [39][0][][] */ -11,-7,20,36,35,-13,-127,35,13,24,-2,-32,-4,-15,-6,-1, 
  /* [40][0][][] */ 4,78,-15,127,12,44,54,33,-71,-33,-32,58,30,49,-65,-34, 
  /* [41][0][][] */ 8,16,-35,-27,-55,7,127,108,-57,95,-40,-11,5,78,38,2, 
  /* [42][0][][] */ 19,-34,-29,-27,19,41,-52,83,82,-99,127,42,-35,34,-45,50, 
  /* [43][0][][] */ -63,6,22,-43,28,17,-73,-76,-28,39,0,-11,-127,-12,38,-3, 
  /* [44][0][][] */ 13,5,-19,-10,-8,-23,-2,-45,127,-6,12,38,14,69,4,49, 
  /* [45][0][][] */ -70,-86,4,-93,50,-9,-10,48,32,-94,-16,-33,22,127,-54,120, 
  /* [46][0][][] */ -32,24,-19,83,-70,-32,1,-61,-127,47,-36,-5,-3,35,10,-28, 
  /* [47][0][][] */ -22,-3,-98,127,5,50,-12,-26,1,69,65,74,-32,-5,35,-11, 
  /* [48][0][][] */ -21,14,21,-127,16,-36,-3,-19,-60,28,41,-6,-1,51,127,39, 
  /* [49][0][][] */ -19,24,44,118,-10,35,-63,-22,34,-47,-102,-35,-28,-37,-102,-127, 
  /* [50][0][][] */ -5,66,16,-124,59,21,-13,62,127,-29,-34,1,-10,-50,4,-39, 
  /* [51][0][][] */ 1,-19,25,-10,45,-5,-49,-127,18,-70,4,4,-16,-7,-5,-13, 
  /* [52][0][][] */ 28,21,-9,26,36,-22,-68,124,-97,127,-53,-49,85,106,9,-33, 
  /* [53][0][][] */ -10,96,5,-85,-40,-5,32,-15,-58,-48,-47,49,15,-127,-92,-13, 
  /* [54][0][][] */ 0,6,17,34,45,-24,6,-29,1,27,-17,-26,-10,127,-40,-14, 
  /* [55][0][][] */ -111,117,83,-23,39,-4,-20,-14,-43,37,105,-25,-25,-18,127,-3, 
  /* [56][0][][] */ 45,-1,7,-127,73,-2,-2,48,44,-62,36,110,-26,1,84,46, 
  /* [57][0][][] */ -24,-5,12,52,-28,15,41,127,-10,-7,0,-31,2,40,1,8, 
  /* [58][0][][] */ 32,127,-8,-123,-1,30,-9,15,108,0,-14,83,8,-101,51,68, 
  /* [59][0][][] */ 15,42,44,-127,-50,-6,33,-1,17,15,22,-77,-11,-123,-62,12, 
  /* [60][0][][] */ 52,-5,118,-53,-49,127,39,-29,-14,43,-60,-20,28,5,34,-1, 
  /* [61][0][][] */ -27,23,-46,-36,-56,18,116,127,-14,73,-17,0,5,74,12,-42, 
  /* [62][0][][] */ -20,5,-3,-4,-84,23,-66,17,-45,-11,5,-52,7,-127,103,18, 
  /* [63][0][][] */ 10,-38,2,-90,56,2,-127,-125,-57,89,-28,22,74,-5,16,-53, 
  /* [64][0][][] */ -17,4,30,54,78,1,-31,-127,28,-105,-3,-30,4,-26,-13,-2, 
  /* [65][0][][] */ -127,12,22,-73,7,73,53,-42,-87,24,44,-21,0,10,-19,-29, 
  /* [66][0][][] */ 63,15,74,11,-54,15,-17,45,-52,-11,65,-76,-18,41,-127,-28, 
  /* [67][0][][] */ 44,-25,-45,74,72,-65,-78,-108,47,-127,-79,-36,-115,29,-101,35, 
  /* [68][0][][] */ 15,-23,-64,48,-59,-89,6,-45,-40,-20,32,-69,-26,54,127,-2, 
  /* [69][0][][] */ -34,42,-63,49,-12,-118,18,81,32,9,53,-24,127,32,-19,5, 
  /* [70][0][][] */ 15,10,-41,-44,-40,8,127,89,-19,51,-11,14,13,46,21,3, 
  /* [71][0][][] */ 17,-6,-39,-61,24,6,5,49,-30,-40,-3,3,5,-127,85,17, 
  /* [72][0][][] */ 21,23,-19,22,19,-45,-33,-127,7,50,-55,22,52,47,48,37, 
  /* [73][0][][] */ -38,-127,-38,-54,-70,-12,38,-38,-11,3,-40,-21,27,-48,65,-17, 
  /* [74][0][][] */ -33,34,62,103,-3,-1,-127,103,26,-34,-42,-40,3,-1,-19,-2, 
  /* [75][0][][] */ -47,36,-32,12,-29,85,85,127,-9,62,4,-40,-127,71,22,31, 
  /* [76][0][][] */ 15,-29,-52,-26,42,-71,-127,-116,-21,-28,0,-7,50,-12,79,-48, 
  /* [77][0][][] */ -32,5,-39,-29,-52,-1,-11,-40,127,4,-70,5,-9,42,25,-81, 
  /* [78][0][][] */ -96,-127,-22,84,60,59,-13,38,2,-59,-116,74,45,-38,108,59, 
  /* [79][0][][] */ 42,-10,31,-62,127,4,54,25,80,27,3,30,-3,-30,23,-37, 
  /* [80][0][][] */ -4,-28,73,-117,-26,-48,1,15,-91,-37,-20,-55,3,127,-44,19, 
  /* [81][0][][] */ 14,-11,33,40,1,61,-9,-28,18,-17,-6,-51,-1,27,-127,15, 
  /* [82][0][][] */ -92,-5,51,-118,-7,-22,-20,-30,-52,-30,-76,-125,-12,-105,-127,34, 
  /* [83][0][][] */ 8,19,-34,-83,-49,6,-16,34,-94,10,23,-73,15,-127,18,64, 
  /* [84][0][][] */ 127,29,15,51,-55,4,-49,21,-8,-20,97,1,-68,16,73,-74, 
  /* [85][0][][] */ -17,-19,17,-33,41,-5,-46,107,-89,-113,-63,-34,-22,78,84,-127, 
  /* [86][0][][] */ 33,-5,19,-7,-59,59,-49,61,-106,-53,31,-33,-17,-127,-23,43, 
  /* [87][0][][] */ 127,-50,24,1,-31,-35,-6,-6,8,6,-112,15,34,1,-7,39, 
  /* [88][0][][] */ 33,72,-27,-15,-11,-19,-16,-10,97,9,47,25,-37,-33,127,-98, 
  /* [89][0][][] */ 40,83,-101,-30,-47,-30,39,-61,51,63,33,-43,-46,-4,-12,-127, 
  /* [90][0][][] */ -21,-25,12,-69,-81,26,127,-56,91,-96,3,-92,41,-33,-54,-30, 
  /* [91][0][][] */ 9,12,-13,-108,-37,-8,32,-32,-58,31,70,53,9,-18,32,127, 
  /* [92][0][][] */ 21,1,-5,8,46,-19,-57,-127,50,-58,-3,-35,-42,-24,5,-19, 
  /* [93][0][][] */ 68,-1,35,-127,-42,-5,-27,48,42,-74,78,-25,-47,112,-24,36, 
  /* [94][0][][] */ -113,45,-102,14,67,-127,-17,6,-6,-56,87,-38,6,-5,-25,-12, 
  /* [95][0][][] */ -31,53,16,-127,0,5,-27,-7,18,-36,-58,-63,3,26,-64,-15, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00064000766724348068, 0.00063040497479960322, 0.00037387898191809654, 0.00027665705420076847, 0.00054443307453766465, 0.00090997305233031511, 0.00097145361360162497, 0.00088244001381099224, 0.00026835512835532427, 0.00094758870545774698, 0.00064707756973803043, 0.00061975349672138691, 0.00057348830159753561, 0.00052886764751747251, 0.00025885956711135805, 0.001327447360381484, 0.00056609301827847958, 0.00038347498048096895, 0.0003576587769202888, 0.00066977448295801878, 0.00099827197846025229, 0.0020267150830477476, 0.00042613589903339744, 0.0018047777703031898, 0.0013292769435793161, 0.00084858434274792671, 0.00056015694281086326, 0.00058255769545212388, 0.00091197539586573839, 0.00027848195168189704, 0.00017634876712691039, 0.00038170898915268481, 0.00087223656009882689, 0.001078137313015759, 0.00060869840672239661, 0.00070440350100398064, 0.001405473449267447, 0.0013046062085777521, 0.00037886234349571168, 0.0020123017020523548, 0.00041162234265357256, 0.00042915681842714548, 0.00020182984007988125, 0.0010829220991581678, 0.00037458669976331294, 0.00049288617447018623, 0.00097700650803744793, 0.0005421831738203764, 0.00018251818255521357, 0.00051320897182449698, 0.00077211693860590458, 0.00055247865384444594, 0.00093845638912171125, 0.00087998039089143276, 0.0011445536511018872, 0.0004779183364007622, 0.00065796170383691788, 0.00044233922380954027, 0.00099485728424042463, 0.00046490805107168853, 0.0010110141010954976, 0.00026809709379449487, 0.00052788091124966741, 0.00045007994049228728, 0.0006160260527394712, 0.0006877562846057117, 0.00079461140558123589, 0.00054272875422611833, 0.00068960164207965136, 0.00082857586676254869, 0.00059700576821342111, 0.00039611072861589491, 0.00031309112091548741, 0.00051631854148581624, 0.0010732983937487006, 0.00078303221380338073, 0.00076581997564062476, 0.00099746743217110634, 0.001109503791667521, 0.0012594200670719147, 0.00038971769390627742, 0.00034534049336798489, 0.00053495226893573999, 0.00028298987308517098, 0.0015095501439645886, 0.0009469901560805738, 0.00061418878613039851, 0.00014944006397854537, 0.00043667215504683554, 0.00058561965124681592, 0.00062970950966700912, 0.0010620813118293881, 0.00068548886338248849, 0.00059720280114561319, 0.00078449695138260722, 0.00049047044012695551, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -4222, -4277, -14188, 28256, 26264, 3923, -5648, -4209, 24459, 1848, 26819, 22841, -10950, 12087, 37626, -26532, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00050667853793129325, 0.00025463581550866365, 0.00028229175950400531, 0.00024811120238155127, 0.00036493741208687425, 0.00030205884831957519, 0.00026580505073070526, 0.00037928766687400639, 0.00022662572155240923, 0.00026274530682712793, 0.00038598751416429877, 0.0007159131346270442, 0.00049275183118879795, 0.00042821705574169755, 0.00047158033703453839, 0.00029987582820467651, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 2,18,-7,14,47,61,-36,-23,40,-3,17,12,-11,12,19,63,4,-8,-14,-12,100,-54,8,-15,-18,-34,-44,-95,1,-4,47,49,107,-2,10,-1,13,-12,-13,1,-25,19,16,-22,0,-28,-16,23,-11,15,-5,-10,-32,-15,6,-4,38,16,-24,-18,-53,23,-12,-13,7,4,49,0,16,4,5,-25,-58,2,3,-4,1,-77,6,-21,38,-21,-55,-44,27,-10,2,18,-1,8,22,-30,27,17,-11,127, 
  /* [1][0][][] */ 71,-107,53,78,-6,-78,-19,-56,-21,-90,-1,29,2,-69,-41,-52,-99,-8,20,17,-30,-124,-41,30,127,-73,-82,25,-21,103,-20,60,6,14,-48,30,-17,-1,63,-34,7,-78,72,-27,-67,18,61,4,45,15,5,-71,73,-75,33,-35,25,22,-10,-106,43,-81,25,-58,4,-90,36,37,44,46,-35,1,-106,44,-28,71,50,110,22,-25,44,1,-86,44,-83,72,-4,58,-44,5,27,3,8,-57,42,-3, 
  /* [2][0][][] */ 29,14,12,-23,5,5,-10,36,57,-12,17,72,-1,0,51,-2,-8,-21,7,-7,-16,-61,12,-51,5,-11,-22,18,-1,22,119,-56,16,-64,-19,52,23,127,-37,-27,2,-21,-2,39,-41,-56,-57,21,22,24,-40,-27,26,-5,1,-27,-17,7,-4,35,6,4,75,84,14,-71,19,-67,-8,-11,-7,16,-13,18,-16,13,23,56,7,11,19,80,31,-13,-12,13,10,11,25,10,-4,-47,-43,8,-6,65, 
  /* [3][0][][] */ -11,-24,-32,37,30,-19,-4,-16,-12,18,6,8,4,-15,46,-12,41,-41,16,13,-10,-11,-4,0,-11,16,7,-9,24,-35,52,-22,10,-10,-16,42,-6,-1,-6,1,9,-65,21,-31,-8,1,-3,1,-127,34,-20,25,-116,-58,-18,-42,24,12,-7,56,-3,21,14,19,-19,-80,-39,19,47,21,1,19,-35,12,-5,-39,-40,-45,27,-38,17,-22,20,66,43,58,30,9,25,-1,-2,4,-24,2,-15,-17, 
  /* [4][0][][] */ 3,-28,13,-67,-5,-11,-51,3,-22,-46,-30,-14,9,72,13,9,51,-9,12,4,-12,30,47,3,-3,-5,20,13,-1,-10,-7,-12,-30,6,2,16,34,-30,-1,-3,11,3,-95,-36,27,-5,-6,-15,3,86,-9,-18,-23,-20,8,-4,-6,-29,25,28,9,10,9,-8,41,-111,24,-18,-51,11,-22,-1,-12,10,-22,29,-29,57,53,8,9,4,127,-42,38,-23,-7,3,61,11,-9,20,-39,28,-5,-47, 
  /* [5][0][][] */ -5,-3,-6,-4,-12,1,-1,114,54,-16,-17,-38,-8,28,43,26,-14,-17,9,-36,-58,-20,-7,-55,21,11,31,76,69,5,73,44,-46,13,-8,1,-57,-66,-36,-10,-45,-23,-7,-14,61,16,1,11,8,15,-25,4,-37,-24,9,-1,-24,-10,-3,28,-49,32,-20,-40,15,19,-19,14,-12,18,-1,7,35,6,2,3,-15,22,13,127,-8,-48,20,33,4,0,22,-28,-7,-27,21,-125,-45,-13,-11,-127, 
  /* [6][0][][] */ -34,-9,-5,-57,-7,-14,-11,13,3,28,-20,-2,42,-74,1,-15,-10,-70,35,15,8,1,-24,21,72,-7,-3,3,21,-5,16,-6,-29,6,-28,0,23,2,25,43,-4,-28,-53,-26,0,-30,32,-127,30,31,25,15,17,9,-10,-50,35,-7,-10,6,18,14,1,11,33,62,28,-28,-26,-9,21,-31,20,9,41,-3,-26,23,3,2,-17,-2,54,-27,1,52,17,-24,28,5,-44,-14,-23,17,-8,7, 
  /* [7][0][][] */ 11,6,42,-27,-5,4,0,-28,1,-8,-13,-15,-14,-96,23,9,-9,-32,-10,-12,15,-17,-37,-2,-26,-10,0,-15,13,9,4,5,-17,8,-11,-20,-2,-9,-27,31,12,-10,-23,25,-2,12,-11,84,3,20,-10,-22,-22,10,-6,-57,38,-2,-6,1,-9,0,-16,-5,-21,37,9,-34,-12,-10,10,36,-6,-8,-15,4,57,3,0,-21,2,-31,37,2,-33,127,-8,-4,-33,-25,-2,15,-20,1,-6,0, 
  /* [8][0][][] */ -69,36,-48,2,33,-8,-17,21,13,62,-46,6,20,32,62,-15,-10,36,-66,17,11,27,-40,-1,-46,-28,18,19,41,-85,1,-1,28,9,9,-6,-19,20,-43,53,10,16,3,-127,-34,-7,46,-17,-41,23,11,68,-99,78,10,-7,1,-23,-32,-24,-5,-29,3,24,-27,28,29,-18,-15,-7,23,72,-18,29,29,26,-15,-96,-7,-35,-20,-11,22,1,-68,1,12,-34,1,30,-30,0,24,-9,-17,-20, 
  /* [9][0][][] */ 31,-48,-37,-29,18,19,-20,22,21,-20,2,19,-41,-20,2,21,-1,-1,30,-21,-24,1,-18,-46,40,8,22,-18,-26,-32,-17,-6,-6,9,22,36,10,46,-29,10,5,11,-15,-76,1,-6,19,-127,-39,3,-10,19,-20,-1,-6,11,-33,20,-6,22,18,6,13,24,18,104,31,48,8,-6,12,-15,-15,6,-30,13,74,4,13,14,-5,-1,17,-40,4,29,-2,-7,-39,25,-31,7,4,3,6,-9, 
  /* [10][0][][] */ 24,43,-17,28,70,-107,-12,-32,11,55,36,-5,-20,21,11,-77,22,33,-25,34,-80,-16,-6,-23,-66,-23,-58,53,20,9,-3,38,-15,-15,28,-17,72,-17,-8,-6,-12,60,42,-19,-55,-16,-36,13,-19,-23,-38,2,-8,-10,1,-15,9,34,-20,-9,2,8,-15,29,17,46,50,24,27,-3,35,47,-50,-26,-53,-8,6,20,-10,7,31,-7,-70,-29,63,-43,95,-10,-18,8,30,-16,85,37,-12,-127, 
  /* [11][0][][] */ 40,39,-32,19,-6,16,49,3,-5,-12,-26,-16,4,3,35,3,2,-7,-91,0,-2,12,2,-10,-42,-19,-6,3,-2,20,-2,-9,-3,8,2,19,8,8,-9,23,0,22,54,-99,30,-36,2,-4,-127,14,12,-45,20,18,-7,16,-12,-9,10,-1,13,-13,-5,5,-45,55,-14,11,12,-2,20,10,-45,-31,9,32,-7,-37,-46,6,8,1,82,46,9,-12,-8,-11,0,27,-20,0,-2,7,-22,11, 
  /* [12][0][][] */ -28,-12,5,3,-22,32,14,6,127,1,-12,4,2,3,-36,-38,24,23,10,70,52,32,-8,-21,5,11,21,-29,-101,3,33,-36,6,-7,-4,-14,19,0,42,-14,-45,-14,0,14,3,30,2,-8,16,4,-45,8,4,-7,12,-6,73,-25,13,14,22,-11,9,-10,-4,29,-39,5,0,8,-16,-28,14,13,-64,5,29,1,11,-65,-15,10,44,38,-19,-11,-28,-26,8,22,-3,46,-16,-21,12,11, 
  /* [13][0][][] */ 31,-8,-25,25,29,-1,9,2,-9,7,8,-5,14,-11,12,-15,18,-73,-33,11,-12,-20,6,7,8,13,4,-1,-11,-36,-4,17,2,3,7,41,15,-5,6,21,-1,9,20,34,20,15,-9,-127,23,-5,8,8,-13,-1,16,7,-9,18,25,9,10,20,-5,5,-7,-21,-16,-53,6,11,-11,-30,-10,40,-12,19,-25,0,19,-3,25,-13,-17,19,14,26,9,23,-2,-1,24,-10,0,15,-9,-10, 
  /* [14][0][][] */ -125,-50,25,55,42,-29,-30,10,-10,16,-3,20,60,7,-127,5,77,-13,-23,28,-7,-10,39,23,-112,10,39,-15,-36,-82,-33,2,-10,1,20,-77,30,44,7,18,25,35,-5,-27,15,123,70,56,-120,50,7,40,-51,-6,34,-5,11,6,72,67,34,49,9,45,7,-17,-49,48,13,83,-50,-90,-83,-2,3,48,-3,38,99,5,65,17,38,30,51,12,50,30,30,43,71,-2,8,21,23,-27, 
  /* [15][0][][] */ 77,-30,43,8,-9,75,33,-29,-8,55,0,8,-84,-11,-15,40,10,47,56,-17,14,27,-92,71,14,2,50,2,21,32,-56,-66,6,-49,42,-7,45,-42,-58,-89,0,36,0,27,6,43,-16,-27,108,-48,-39,33,49,-108,59,-109,-2,-66,11,14,-127,-6,19,20,75,-26,-49,35,-36,68,-24,10,48,21,11,5,16,-60,67,-8,-17,7,38,80,-13,-8,-5,-56,-1,-11,61,-8,-67,64,23,-19, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.021533837541937828, 0.010822021402418613, 0.011997399851679802, 0.010544725693762302, 0.015509839169681072, 0.012837500311434269, 0.011296714656054974, 0.016119726002216339, 0.0096315927803516388, 0.011166675016283989, 0.016404468566179276, 0.030426306650042534, 0.020941952243447304, 0.018199224025011063, 0.020042164251208305, 0.012744721956551075, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9195, -9457, 3088, 49338, -1985, -4606, -11246, 2839, -2648, 1091, 2921, -1224, 1393, -6434, 7201, -4614, -1011, 16949, 25294, 2153, 2477, -3183, -58, 196, 17561, -1396, -1138, -3444, -5896, -6955, 5779, -9063, -95, -1534, -470, 10524, 1587, -3841, 20066, 547, -105, 1878, -9694, -7449, -7475, 65734, 159, 15161, 30777, -12728, -45, 6243, 7398, -385, -6253, 2510, -11970, 1804, 1802, -6775, -1639, -791, -13946, -548, 1527, 16900, 28883, 27751, -12572, 447, -9859, -1199, 38762, 10830, -47, 467, 18168, 32762, -14, -4529, -1905, -8063, 488, -2952, 1071, 181, 1023, -298, 1721, -2850, 19, -699, -8, -673, 120, 48506, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019958455231972039, 0.0001157784863607958, 0.00020883898832835257, 4.260824789525941e-05, 0.00013171324098948389, 0.00016805966151878238, 0.00029788538813591003, 7.7978307672310621e-05, 0.00012361847620923072, 0.00038290725206024945, 0.00016664978465996683, 0.00036568936775438488, 9.2872127424925566e-05, 0.00039324891986325383, 0.00014548869512509555, 0.00017433578614145517, 9.9966426205355674e-05, 0.00028213832410983741, 5.727158350055106e-05, 0.00024958798894658685, 4.6169330744305626e-05, 0.0001820343459257856, 0.00014006522542331368, 0.00037046746001578867, 0.00019848046940751374, 0.00021545302297454327, 0.00012144470383645967, 0.00017993422807194293, 0.00010864117211895064, 0.00013265393499750644, 0.00014214788097888231, 0.00018479276332072914, 0.00012158361641922966, 0.00011298191384412348, 0.00020241489983163774, 0.0002188655489590019, 0.00041734374826774001, 0.0001249804045073688, 5.7900833780877292e-05, 0.00014678733714390546, 0.00024755383492447436, 0.00030848212190903723, 0.00036181099130772054, 0.00015851481293793768, 0.00018300088413525373, 5.2391595090739429e-05, 0.00022377242567017674, 0.0002239312743768096, 8.4030194557271898e-05, 0.00019697255629580468, 0.00019728335610125214, 0.00021729865693487227, 0.00023605985916219652, 0.00026676172274164855, 0.00021536470740102232, 0.00040479991002939641, 0.00032042895327322185, 0.0002014077763305977, 9.805875743040815e-05, 8.0843245086725801e-05, 0.00026983357383869588, 0.00013174636114854366, 0.00025687779998406768, 0.00012505959603004158, 0.00018537948199082166, 0.00016653661441523582, 8.9566732640378177e-05, 6.5166183048859239e-05, 0.00030728100682608783, 0.00025833450490608811, 0.00019259615510236472, 0.00011453060142230242, 0.00015020067803561687, 0.00018012769578490406, 0.00015607538807671517, 0.000219597844989039, 0.00050387246301397681, 5.2671246521640569e-05, 0.0002402051177341491, 0.00037665636045858264, 0.00016128004062920809, 0.00025006948271766305, 0.00014211278175935149, 0.00012983406486455351, 0.00012765444989781827, 9.4649891252629459e-05, 0.00014310627011582255, 0.00015619304031133652, 0.00019841968605760485, 0.00010267163452226669, 0.00020340780611149967, 0.00011018739314749837, 0.00014847835700493306, 0.0004549679288174957, 0.01037241704761982, 7.853632268961519e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,7,-20,104,-16,23,-63,-54,17,-5,99,-10,3,-8,-4,54,4,16,-34,3,75,3,32,-33,2,17,43,50,21,13,24,47,-8,27,9,-15,5,49,-61,-26,20,9,27,17,-85,-55,25,-4,-11,-20,-7,-6,49,5,-8,1,-3,-36,28,-30,26,-3,127,27,-13,-10,12,-53,65,36,2,-8,79,-31,68,4,17,-127,29,65,1,15,127,-14,37,29,-28,-19,34,-7,-14,81,0,20,-2,12, -48,13,-8,10,52,-9,-11,-127,37,14,-127,-5,-17,-12,5,92,17,-30,-16,-15,77,-96,127,26,-61,-31,-106,-15,26,35,-48,17,118,11,-14,-1,-23,127,-66,-127,9,-19,-30,13,47,-127,127,-44,-76,49,49,7,39,-65,32,55,36,43,-100,83,127,33,3,-19,43,-38,-94,-3,36,-31,-18,47,-49,-47,104,-3,-30,-60,-34,64,-65,61,-16,9,-12,48,55,-41,-28,53,-13,72,-127,-30,23,-127, 1,-3,-22,-74,8,17,38,21,-4,-1,4,63,0,-12,-11,6,-13,17,-16,17,7,26,24,-32,1,-31,10,13,-7,5,46,-79,43,17,9,-22,12,4,-32,-21,7,2,-16,7,22,-31,21,1,7,-7,6,-5,5,5,-5,8,-8,45,7,-3,11,-19,3,-17,-27,-17,29,-51,-105,-7,40,-17,-127,-21,-13,17,11,-10,5,11,-13,23,-36,-4,-41,21,26,36,-25,-17,24,-12,18,7,-2,-45, 
  /* [0][1][][] */ -40,59,-17,37,-84,-16,-11,-44,25,95,-44,-22,-32,-25,-7,62,127,-24,-88,-13,59,-127,-28,16,-35,-47,-127,-5,37,36,-49,27,-127,-75,-57,4,65,-2,-51,46,-20,86,1,-3,35,-51,-12,-31,127,44,-3,21,45,9,-36,-18,31,9,-123,127,-37,-90,21,127,-59,-35,-85,127,-36,127,-18,52,-36,-53,36,8,-35,-69,127,48,127,35,6,-1,127,30,-95,47,-38,-36,-103,39,96,103,29,-59, 127,127,127,127,-45,-127,127,24,127,-127,16,-127,-108,127,127,127,-16,-127,-62,-127,127,24,-66,127,127,127,-55,-127,127,127,-127,127,-8,-127,-125,127,-127,-43,97,110,-127,-127,127,127,127,-118,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-42,39,-105,-28,-70,-67,127,127,-71,126,127,-107,-127,127,-42,127,-127,-127,-127,123,-76,127,-42,127,79,127,-39,-127,-25,-108,-127,-127,-23,-127,-21,-127,-127,115, -24,66,-37,2,127,69,-22,50,5,23,-13,-4,-27,-31,-12,-7,-104,-22,-127,39,31,79,-11,-115,-33,-41,124,73,10,35,72,9,125,-48,127,-3,55,5,-93,14,36,23,-23,0,-24,-52,-12,-42,81,16,-11,40,-5,-5,-76,-14,24,20,127,-89,2,127,0,-35,-111,-28,-75,100,16,-17,112,24,-18,-55,11,46,-28,-6,-44,-3,-45,8,46,24,-91,36,127,-48,32,-23,127,-10,-112,35,34,18, 
  /* [0][2][][] */ -4,-40,-21,-62,-4,14,40,31,-2,10,-19,53,23,-35,-7,7,41,2,14,21,-11,30,-16,-25,2,-24,10,3,-9,-8,49,-75,-39,67,-27,-25,31,-35,-63,17,9,10,-34,20,12,-76,-12,-1,-9,7,17,-8,7,1,-22,5,-1,44,-49,35,-6,-13,5,16,-5,-9,20,-53,-55,11,-20,-13,-119,-31,1,18,15,-12,56,17,23,21,-39,15,11,25,-20,9,4,24,24,-6,20,40,-7,-29, -27,-10,-27,24,-44,73,-24,67,5,-5,54,-11,127,-8,-17,-18,-1,-40,-54,24,-25,79,-44,-111,-47,-47,102,70,14,43,54,-2,-122,63,-15,-23,-29,-26,-127,-3,45,-13,-15,38,-27,-44,-18,-48,-60,28,69,24,-11,-81,30,51,17,25,75,-54,21,-58,-9,1,19,-26,-127,-56,-11,-27,-62,23,36,-45,-30,-7,-43,23,-57,1,50,34,19,10,4,62,-91,127,15,125,-30,-20,114,-21,46,83, -10,-35,-25,29,11,65,-43,13,4,-6,0,14,11,-51,-9,-12,-44,-6,19,20,-25,5,-20,4,-4,19,-2,52,-2,-7,33,28,17,42,20,-23,-6,-25,-30,7,11,-11,22,10,-74,-31,-13,4,-1,-15,-1,-4,-9,8,-18,-5,-2,-50,14,-29,-21,48,9,-28,-10,-2,35,-54,46,7,54,-21,30,-54,-18,22,12,11,-6,21,-29,32,89,-14,-18,55,38,-9,109,11,2,-20,11,-22,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0084823435172438622, 0.0049205855466425419, 0.0088756568729877472, 0.0018108505755662918, 0.0055978125892579556, 0.0071425354108214378, 0.012660128995776176, 0.0033140780869871378, 0.0052537852898240089, 0.016273558139801025, 0.0070826155133545399, 0.015541798435151577, 0.0039470652118325233, 0.016713079065084457, 0.0061832694336771965, 0.007409270852804184, 0.0042485729791224003, 0.011990878731012344, 0.0024340422824025154, 0.010607489384710789, 0.0019621965475380421, 0.0077364593744277954, 0.005952772218734026, 0.01574486680328846, 0.0084354197606444359, 0.009156753309071064, 0.0051613999530673027, 0.0076472046785056591, 0.0046172495931386948, 0.0056377924047410488, 0.006041285116225481, 0.0078536923974752426, 0.0051673036068677902, 0.0048017310909926891, 0.0086026331409811974, 0.0093017853796482086, 0.017737109214067459, 0.0053116669878363609, 0.0024607854429632425, 0.0062384619377553463, 0.010521037504076958, 0.013110490515828133, 0.015376966446638107, 0.0067368792369961739, 0.0077775376848876476, 0.0022266427986323833, 0.0095103280618786812, 0.0095170792192220688, 0.0035712830722332001, 0.0083713335916399956, 0.0083845425397157669, 0.0092351930215954781, 0.010032543912529945, 0.011337372474372387, 0.0091530000790953636, 0.017203995957970619, 0.013618229888379574, 0.0085598304867744446, 0.0041674971580505371, 0.0034358378034085035, 0.011467927135527134, 0.0055992202833294868, 0.010917306877672672, 0.0053150327876210213, 0.0078786276280879974, 0.0070778056979179382, 0.0038065859116613865, 0.0027695626486092806, 0.013059441931545734, 0.010979216545820236, 0.0081853363662958145, 0.0048675504513084888, 0.006383528932929039, 0.0076554268598556519, 0.0066332039423286915, 0.0093329083174467087, 0.021414579823613167, 0.0022385278716683388, 0.010208717547357082, 0.016007894650101662, 0.0068544014357030392, 0.01062795240432024, 0.006039793137460947, 0.0055179474875330925, 0.0054253139533102512, 0.004022620152682066, 0.006082016509026289, 0.006638204213231802, 0.0084328362718224525, 0.0043635442852973938, 0.0086448313668370247, 0.0046829641796648502, 0.0063103302381932735, 0.019336136057972908, 0.44082772731781006, 0.0033377937506884336, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 18469, 1430, 6477, -541, 5152, 6500, 15141, 5408, -1260, 21318, 6837, 1834, 7540, 46602, -394, -1977, 10430, 12589, 2170, -181, -908, 13520, 4558, 4429, 9154, 4733, 4941, 5281, 91, -35, 7765, 10246, 18611, 1546, 8644, -729, 20530, 8297, 886, 6647, 996, 11856, 12765, 5010, 3676, 13459, 15494, 5595, 5213, 3907, 370, -914, 27894, 8492, 8763, 15638, -260, 8855, 3309, 4520, 14879, 8739, 2919, 8355, 6814, 3970, 5177, -786, 18901, 9197, 10688, -1285, -1495, 3839, 2424, 3362, 27944, 14540, 13515, -3671, 5283, -7000, -1741, 561, 7955, 5986, 7414, 4633, 13124, 4708, 8525, 4386, 18251, 25789, -12000, 17408, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013968556595500559, 0.0002514004590921104, 0.00020599152776412666, 0.0010319415014237165, 0.00030757239437662065, 0.00014358830230776221, 0.00020699361630249768, 0.00065236876253038645, 0.00035976286744698882, 8.4436476754490286e-05, 0.00021006025781389326, 0.00045265053631737828, 0.00036744211683981121, 0.00010387642396381125, 0.00023915554629638791, 0.00034731044434010983, 0.00021130923414602876, 0.0001864031219156459, 0.00020732842676807195, 0.00063218106515705585, 0.00031623445102013648, 0.00018323870608583093, 0.00032811058918014169, 0.00017694037524051964, 0.00019214428903069347, 0.00044256806722842157, 0.00029012354207225144, 0.00016520143253728747, 0.00053557183127850294, 0.00030775050981901586, 0.00018656578322406858, 0.00018516535055823624, 0.000107010462670587, 0.00069842027733102441, 0.00019352600793354213, 0.00036672412534244359, 0.00011022858961950988, 0.00031502990168519318, 0.00052378844702616334, 0.00014634280523750931, 0.00049621885409578681, 0.00016026373486965895, 0.00016869678802322596, 0.00014904167619533837, 0.00030817609513178468, 0.00024180905893445015, 0.00018389191245660186, 0.00025983739760704339, 0.0003011393710039556, 0.00023113818315323442, 0.0003372112987563014, 0.00071380630834028125, 9.597854659659788e-05, 0.00018967386859003454, 0.00026651061489246786, 0.00011709253158187494, 0.00038976012729108334, 0.00019488620455376804, 0.00023850043362472206, 0.00035911641316488385, 0.00011267678928561509, 0.00016170959861483425, 0.00036185470526106656, 0.00033148028887808323, 0.00015372711641248316, 0.00028438220033422112, 0.00037448186776600778, 0.00042728678090497851, 0.00014242039469536394, 0.00012716575292870402, 0.00018642270879354328, 0.00037456530844792724, 0.00026137119857594371, 0.00033666222589090466, 0.00018213668954558671, 0.00037967565003782511, 8.3904458733741194e-05, 0.00030964924371801317, 0.00012244386016391218, 0.00033432137570343912, 0.00020301125186961144, 0.00029515023925341666, 0.00021398908575065434, 0.00045455995132215321, 0.00020238729484844953, 0.00026353311841376126, 0.00021749951702076942, 0.00030185159994289279, 0.00013029701949562877, 0.00034333654912188649, 0.0001651140337344259, 0.00038825278170406818, 0.00011479689419502392, 0.00010673533688532189, 0.00024449208285659552, 0.00018746787100099027, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 41,-29,121,113,59,-25,29,-24,127,-17,-50,-76,31,87,-37,-86, 
  /* [1][0][][] */ 19,67,5,7,91,8,11,38,55,75,-19,127,3,-13,83,-102, 
  /* [2][0][][] */ 26,-45,-8,-7,-66,28,-36,93,-68,-82,-4,65,-6,-127,67,-86, 
  /* [3][0][][] */ 127,114,-7,32,-120,-21,-55,-23,-4,4,101,-68,-56,82,-42,-31, 
  /* [4][0][][] */ 10,-7,11,9,-27,26,-8,36,-54,-33,-11,-7,-1,-127,29,7, 
  /* [5][0][][] */ 118,-48,-18,-8,-9,-127,-34,13,-11,4,-118,-14,18,-5,-6,28, 
  /* [6][0][][] */ -127,-63,-12,83,-54,6,-36,32,-125,-82,-70,-36,22,53,-11,102, 
  /* [7][0][][] */ -22,7,-70,39,31,-127,-28,46,4,-24,10,-11,-9,13,-37,20, 
  /* [8][0][][] */ 33,-46,-11,-7,8,25,-57,-57,-12,17,-64,9,-127,-1,5,27, 
  /* [9][0][][] */ 24,-54,64,127,9,15,-18,-80,113,-76,9,-10,-13,56,-55,25, 
  /* [10][0][][] */ -115,-77,4,-34,127,51,32,55,126,-84,-70,44,111,-92,-125,58, 
  /* [11][0][][] */ 35,-21,-127,19,62,26,-28,35,-8,-44,-12,-8,2,30,-45,-3, 
  /* [12][0][][] */ 104,-46,1,-6,-14,-56,-47,-14,31,-11,-127,-28,-59,-21,-6,65, 
  /* [13][0][][] */ 41,-83,37,-70,96,24,-118,-127,30,-97,16,6,9,-27,21,0, 
  /* [14][0][][] */ -62,19,-97,-51,91,-127,63,-66,61,43,-3,-103,26,117,-20,26, 
  /* [15][0][][] */ 34,-3,69,43,53,-44,-42,-12,17,-67,-72,-8,-127,-51,-15,52, 
  /* [16][0][][] */ -124,53,13,18,5,86,32,67,-16,23,127,15,-1,16,1,-54, 
  /* [17][0][][] */ -8,-7,-46,-34,-31,6,42,74,-23,127,-19,8,-5,80,64,1, 
  /* [18][0][][] */ -9,127,-47,1,14,14,53,-79,37,110,-44,110,17,-46,36,-110, 
  /* [19][0][][] */ 8,-19,40,16,4,46,-6,19,13,2,-44,-10,-127,0,-14,27, 
  /* [20][0][][] */ 96,-52,-14,-84,-39,29,38,-77,-66,34,-127,-34,20,-7,51,20, 
  /* [21][0][][] */ 44,-12,127,37,-29,41,21,7,-5,24,-26,-16,-19,74,3,-4, 
  /* [22][0][][] */ 34,13,9,1,-25,-1,32,127,6,9,5,23,4,26,20,29, 
  /* [23][0][][] */ -25,25,-88,12,12,-127,17,48,-8,-21,-20,-5,-69,-1,-11,40, 
  /* [24][0][][] */ 41,-63,9,-54,62,-2,-37,-15,37,29,63,101,-44,93,127,29, 
  /* [25][0][][] */ -127,-90,-47,-1,14,0,8,-33,-48,2,-70,10,13,42,37,52, 
  /* [26][0][][] */ 5,-6,46,-9,-12,4,-41,60,-81,-54,-6,11,-3,-127,48,-11, 
  /* [27][0][][] */ -108,41,-41,37,42,-21,-6,23,47,-37,127,26,-15,12,-13,-32, 
  /* [28][0][][] */ -22,-13,25,32,4,5,10,84,31,9,-17,-5,-127,-5,-15,32, 
  /* [29][0][][] */ -12,61,41,-38,38,-10,24,-20,-127,27,-33,5,4,34,-96,8, 
  /* [30][0][][] */ -10,-3,-127,-32,18,-57,6,21,-17,-18,-12,-27,-33,-27,2,11, 
  /* [31][0][][] */ 127,-40,-104,17,45,-5,-53,53,-22,-1,-73,-34,19,-2,-81,25, 
  /* [32][0][][] */ -124,58,26,33,7,89,29,43,12,2,127,6,-37,9,-7,-16, 
  /* [33][0][][] */ 4,-9,127,-24,-70,29,11,-43,-12,14,-6,14,-14,15,38,22, 
  /* [34][0][][] */ -13,-13,-59,-127,18,-5,11,-29,-30,-47,-32,-121,-19,-7,50,18, 
  /* [35][0][][] */ 6,-29,31,40,51,-24,16,-14,-111,33,-10,23,-16,127,-48,-33, 
  /* [36][0][][] */ -119,45,-21,-3,-4,38,36,79,-4,34,127,-1,6,27,12,-23, 
  /* [37][0][][] */ -32,12,127,-34,-77,-60,19,-27,13,19,-4,8,-7,-53,59,17, 
  /* [38][0][][] */ 20,-22,-16,20,33,-54,-68,4,-11,-26,63,-19,127,34,-4,13, 
  /* [39][0][][] */ -25,-24,-5,-35,-48,-94,67,127,-35,2,17,-39,5,60,65,74, 
  /* [40][0][][] */ 68,-14,-11,-4,0,79,-25,3,21,-5,20,6,127,20,-22,-27, 
  /* [41][0][][] */ -2,-5,-36,-127,22,-5,-34,-67,-14,-43,11,-35,-8,-23,-15,38, 
  /* [42][0][][] */ 43,44,17,104,-96,1,-86,11,-75,-62,71,-71,-36,127,-52,3, 
  /* [43][0][][] */ 23,113,-35,127,16,27,49,-70,-41,89,-10,22,1,-53,45,43, 
  /* [44][0][][] */ -17,-31,-127,27,64,88,-57,58,-11,-25,47,-16,14,-21,-55,-7, 
  /* [45][0][][] */ -2,24,-10,-127,-20,-4,56,0,-11,29,-23,16,12,-82,27,-26, 
  /* [46][0][][] */ 9,25,53,-21,10,19,-49,51,15,-50,-25,8,9,127,44,-11, 
  /* [47][0][][] */ 16,-18,22,-35,-36,14,-59,49,-12,-27,15,28,7,-127,39,12, 
  /* [48][0][][] */ 9,-7,9,-127,-10,-21,-2,8,8,-23,15,-17,1,45,-7,62, 
  /* [49][0][][] */ 41,-33,-7,124,102,10,6,56,-69,19,36,43,-10,49,127,-9, 
  /* [50][0][][] */ -29,-8,70,-30,2,127,-22,-57,35,-23,117,33,81,-3,-12,-56, 
  /* [51][0][][] */ 26,47,19,7,23,6,-42,26,40,-2,1,127,12,35,23,-53, 
  /* [52][0][][] */ -22,57,127,17,26,-34,7,-63,-29,7,18,50,-4,108,-124,-14, 
  /* [53][0][][] */ -16,-10,-55,-127,-42,15,24,-47,-20,54,20,5,27,-33,58,5, 
  /* [54][0][][] */ 0,4,-34,-47,17,18,-16,4,75,-36,-1,-40,-6,127,21,25, 
  /* [55][0][][] */ 3,-33,-58,-26,1,-70,-5,-127,-2,-110,-26,-19,-47,-97,-47,0, 
  /* [56][0][][] */ 45,45,28,57,3,-24,18,127,19,-25,-1,-37,74,-15,-53,40, 
  /* [57][0][][] */ 87,-17,127,-33,-76,-45,3,-20,16,-1,-110,18,47,-52,52,20, 
  /* [58][0][][] */ 104,94,11,96,-127,-17,-6,51,-24,20,77,-31,-71,-64,-22,-67, 
  /* [59][0][][] */ 127,-38,-10,2,-21,-16,-5,2,-24,22,-115,-10,16,-2,10,23, 
  /* [60][0][][] */ -127,41,-13,-13,3,10,25,38,-1,9,86,-9,-39,-10,11,-6, 
  /* [61][0][][] */ -93,54,12,20,24,5,-77,-56,127,-94,74,-8,52,-45,-84,-49, 
  /* [62][0][][] */ -15,-39,-127,48,57,100,-9,98,22,-58,34,-14,-75,-5,-96,-7, 
  /* [63][0][][] */ -49,14,127,-35,-66,-60,37,-36,5,22,-4,9,-19,-57,70,9, 
  /* [64][0][][] */ 29,71,-13,36,54,-5,95,-127,-11,110,-7,-26,-15,-127,-4,42, 
  /* [65][0][][] */ 6,28,9,-22,66,15,2,-127,-30,-55,-30,-48,-5,-43,37,21, 
  /* [66][0][][] */ -127,-4,-18,1,-40,20,6,-44,-68,-42,-72,47,49,23,47,76, 
  /* [67][0][][] */ -5,-46,7,127,5,2,-30,31,54,17,4,-12,-5,-32,-81,-24, 
  /* [68][0][][] */ 10,8,-10,127,-58,-25,7,-25,-59,38,8,-17,-28,-72,-19,-38, 
  /* [69][0][][] */ 96,100,20,120,52,-9,55,-127,12,100,17,68,12,-34,20,-18, 
  /* [70][0][][] */ 15,-23,-15,-99,108,-38,50,26,91,-18,66,-46,-1,99,86,127, 
  /* [71][0][][] */ 6,41,13,98,50,-127,-47,97,49,-105,17,12,16,-52,-67,28, 
  /* [72][0][][] */ -127,-72,-22,54,9,34,-22,26,-60,-23,-104,40,52,12,7,107, 
  /* [73][0][][] */ -27,-21,-20,67,21,-24,-8,-23,86,17,7,7,19,127,-56,-50, 
  /* [74][0][][] */ 90,-36,10,-18,-36,-13,43,-27,-44,-6,-127,36,-119,-21,32,61, 
  /* [75][0][][] */ -20,-13,-20,127,-34,16,-7,-26,-71,15,-13,-26,-1,-49,-19,-35, 
  /* [76][0][][] */ -11,-9,5,44,48,16,-30,-127,26,-122,18,32,-25,-12,38,-53, 
  /* [77][0][][] */ 127,-28,27,40,-37,-3,-42,-6,39,-11,-37,46,30,16,-51,38, 
  /* [78][0][][] */ -16,-6,55,-1,14,-12,-55,31,39,-31,-38,-34,18,127,23,-27, 
  /* [79][0][][] */ 1,23,40,16,45,52,-41,-49,10,-39,71,-19,127,-28,-29,-43, 
  /* [80][0][][] */ -113,-76,-84,127,0,25,34,-9,-77,39,-103,18,43,-93,-6,40, 
  /* [81][0][][] */ 65,4,-64,44,127,89,-43,-41,-11,-107,-16,-74,-31,-7,-95,19, 
  /* [82][0][][] */ 118,123,-4,37,-127,-15,-82,-30,-68,-10,117,-59,-56,103,-8,-43, 
  /* [83][0][][] */ 127,38,11,-32,7,-11,-13,29,44,10,87,-42,-62,-31,-33,-83, 
  /* [84][0][][] */ -6,-63,-49,-22,54,15,-15,-127,-17,-59,28,22,-21,3,-6,-24, 
  /* [85][0][][] */ -30,-13,-52,-55,-3,-10,71,81,-4,127,-5,-54,23,73,74,-18, 
  /* [86][0][][] */ 100,-22,-2,-6,-5,-32,1,-20,6,2,-127,-2,12,14,-3,30, 
  /* [87][0][][] */ -23,34,16,-28,-3,84,-28,52,0,-37,38,15,11,-127,11,-2, 
  /* [88][0][][] */ 9,-14,-107,-64,54,-17,-36,-127,-6,-39,-23,-42,-53,-16,29,-11, 
  /* [89][0][][] */ 30,-23,26,-127,30,-1,-51,120,77,-68,39,3,-12,39,28,45, 
  /* [90][0][][] */ -11,14,-46,48,81,-7,100,-99,71,127,-36,41,19,4,-5,-19, 
  /* [91][0][][] */ 38,-22,-39,-15,-4,-127,-14,-3,-8,-3,-39,-10,23,-12,10,28, 
  /* [92][0][][] */ 11,4,127,68,52,24,-3,39,-23,23,-56,23,25,94,-6,-18, 
  /* [93][0][][] */ 127,-38,-47,-16,-32,-52,8,40,-31,51,-117,-5,-6,22,-5,56, 
  /* [94][0][][] */ 14,-17,46,78,115,-35,-12,55,5,-18,-4,54,-4,127,-22,-81, 
  /* [95][0][][] */ -112,38,33,50,28,43,19,-4,20,10,127,4,-13,40,-16,-35, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00048172927927225828, 0.0008669969392940402, 0.00071039661997929215, 0.0035588245373219252, 0.0010607154108583927, 0.00049518852028995752, 0.00071385246701538563, 0.0022498038597404957, 0.0012407030444592237, 0.00029119345708750188, 0.00072442827513441443, 0.001561041921377182, 0.0012671862496063113, 0.00035823541111312807, 0.00082476832903921604, 0.0011977587128058076, 0.00072873558383435011, 0.00064284267136827111, 0.00071500713238492608, 0.0021801833063364029, 0.0010905879316851497, 0.00063192966626957059, 0.0011315448209643364, 0.00061020877910777926, 0.00066264206543564796, 0.0015262707602232695, 0.0010005400981754065, 0.00056972505990415812, 0.0018470098730176687, 0.0010613296180963516, 0.0006434036185964942, 0.00063857401255518198, 0.0003690436715260148, 0.002408620435744524, 0.00066740711918100715, 0.0012647100957110524, 0.00038014192250557244, 0.0010864338837563992, 0.0018063728930428624, 0.00050468789413571358, 0.0017112945206463337, 0.00055269658332690597, 0.00058177940081804991, 0.00051399541553109884, 0.0010627973824739456, 0.00083391938824206591, 0.00063418236095458269, 0.00089609314454719424, 0.0010385300265625119, 0.00079711910802870989, 0.0011629301588982344, 0.0024616816081106663, 0.00033099824213422835, 0.00065412238473072648, 0.00091910694027319551, 0.00040381337748840451, 0.0013441536575555801, 0.00067209801636636257, 0.00082250905688852072, 0.0012384736910462379, 0.00038858494372107089, 0.00055768288439139724, 0.0012479170691221952, 0.0011431657476350665, 0.00053015392040833831, 0.00098074006382375956, 0.0012914639664813876, 0.0014735707081854343, 0.00049116078298538923, 0.00043855258263647556, 0.00064291019225493073, 0.0012917517451569438, 0.00090138276573270559, 0.0011610365472733974, 0.00062812917167320848, 0.0013093756278976798, 0.00028935869340784848, 0.0010678777471184731, 0.00042226834921166301, 0.0011529637267813087, 0.00070011860225349665, 0.0010178755037486553, 0.0007379775051958859, 0.0015676268376410007, 0.00069796678144484758, 0.00090883846860378981, 0.00075008382555097342, 0.0010409862734377384, 0.00044935129699297249, 0.0011840540682896972, 0.00056942366063594818, 0.001338955364190042, 0.0003958964953199029, 0.00036809485754929483, 0.00084317231085151434, 0.00064651464344933629, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -38868, 3044, 974, -7545, 1676, -5139, -10143, -43037, 4223, 25286, 33544, -8364, -2045, -22052, 37971, -42606, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00081353861605748534, 0.00083012913819402456, 0.0011301288614049554, 0.0011232026154175401, 0.00069335184525698423, 0.0011127013713121414, 0.0012980762403458357, 0.00057917559752240777, 0.00063195201801136136, 0.00062359991716220975, 0.000970055116340518, 0.00055708445142954588, 0.00085046904860064387, 0.0014465303393080831, 0.00046846215263940394, 0.00052033003885298967, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,-5,-23,13,25,-2,2,102,-44,10,41,-1,14,-16,-12,16,12,-14,-5,-6,66,-3,21,127,-15,88,-6,-18,24,-19,27,-29,-14,54,23,-42,18,42,19,-13,-100,-20,25,40,31,23,-117,-52, 
  /* [1][0][][] */ -35,-15,21,18,-31,7,-1,55,-51,-36,2,-45,-19,-16,-2,-1,-27,117,-7,16,6,11,-29,-13,29,-38,16,21,-28,-88,-35,18,-24,-2,35,0,0,-43,-1,20,-15,-33,127,13,11,-1,18,-9, 
  /* [2][0][][] */ -24,-11,-14,-34,-2,-68,6,-19,3,13,15,30,13,13,-13,11,-5,-21,-24,-16,-2,2,-1,-127,-13,77,-14,4,1,-21,0,-8,-8,58,12,1,23,8,29,-1,-38,5,-17,-7,-3,-12,14,6, 
  /* [3][0][][] */ -6,31,2,-31,-2,0,3,-4,-19,0,1,38,-127,7,-7,-1,2,7,-20,-3,-29,7,8,15,-8,-10,2,26,-8,16,6,14,3,1,14,18,-11,26,41,3,9,5,21,-29,11,-7,3,20, 
  /* [4][0][][] */ 34,-29,11,8,18,30,24,-24,-32,6,-9,-19,2,11,1,13,23,-6,-80,5,-5,9,14,68,-1,-28,4,51,10,-70,17,9,12,-37,29,-127,9,39,-1,16,-21,16,6,-22,-10,-18,12,5, 
  /* [5][0][][] */ 30,4,-21,53,-3,-4,9,24,-2,0,42,5,1,52,3,0,-21,19,24,1,7,0,4,-28,-2,-53,4,-17,-3,-7,2,7,65,-127,0,26,-14,-10,16,1,-91,53,16,-5,-3,-2,-93,-5, 
  /* [6][0][][] */ 25,-5,6,8,-10,-6,3,-15,-3,4,-3,5,-14,5,4,5,1,-9,127,9,5,11,16,-31,6,1,22,-14,-9,-3,-1,8,1,-10,27,-33,-1,-41,67,15,3,-7,-7,9,-12,3,5,-13, 
  /* [7][0][][] */ -45,-18,-8,40,-6,76,-3,42,2,26,-10,127,83,-7,-6,-2,-5,-21,-4,-17,-33,-3,-17,73,4,-39,-56,-34,-14,-12,-10,-9,2,3,-21,9,6,-56,95,0,28,30,-68,-57,13,-6,0,1, 
  /* [8][0][][] */ -48,-46,1,1,-6,3,-1,32,-7,-67,4,36,53,5,8,2,-15,60,-32,6,-54,19,-8,-15,1,-2,5,46,-11,118,-15,24,1,-1,-21,-127,-113,73,34,29,18,-4,104,-21,8,33,21,35, 
  /* [9][0][][] */ -20,5,-6,29,17,-35,0,-4,61,-39,5,64,-62,10,13,5,-3,22,-41,-26,55,12,-10,-17,-1,14,48,-24,14,9,15,-7,-10,22,74,-106,-9,-127,-94,3,-31,22,62,8,9,5,-20,-42, 
  /* [10][0][][] */ -21,-10,-33,-127,45,87,7,-16,1,33,22,12,51,-50,-31,25,35,-41,56,-32,34,-24,42,54,-49,-112,7,-35,50,34,46,-46,-27,-83,27,-5,14,-41,3,-32,-33,-64,-12,14,13,14,18,-37, 
  /* [11][0][][] */ -4,52,-6,60,33,-63,-82,-17,-3,67,-12,-3,-5,55,-5,-84,22,44,3,-6,-57,-114,15,-3,11,-46,20,-15,54,-42,22,-83,51,-25,-44,-99,95,21,6,-127,-8,66,94,-77,-10,-53,37,33, 
  /* [12][0][][] */ 127,-1,-15,13,4,19,5,99,24,-14,-61,-19,-5,14,-9,-3,-10,5,-5,-5,8,4,1,21,-2,15,-2,6,-3,15,-1,-1,1,-61,-7,10,-19,-18,-28,-2,-14,-78,10,-122,-55,-13,75,-8, 
  /* [13][0][][] */ 10,3,0,5,8,-10,2,1,-2,7,5,20,-4,3,4,1,7,1,10,3,11,-12,9,-4,2,0,16,127,10,-3,6,-2,4,-1,-38,19,9,-3,6,-14,-13,-3,-1,6,0,-1,-8,-11, 
  /* [14][0][][] */ 60,-23,46,-66,53,26,37,-98,-50,-61,-9,127,-71,-7,67,18,49,24,-50,70,25,18,69,-13,26,59,-33,-120,29,-39,62,47,-7,76,-119,-46,-35,38,86,10,-33,11,61,3,-3,0,12,-32, 
  /* [15][0][][] */ -7,-52,-67,-30,56,22,73,-49,-14,15,-19,-38,85,18,-96,56,56,53,82,-76,-102,-21,54,-10,-85,43,24,49,49,53,41,-39,25,60,94,127,-17,-102,-12,-28,96,57,111,-47,-8,-26,-17,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.034575391560792923, 0.035280488431453705, 0.048030473291873932, 0.047736112028360367, 0.029467452317476273, 0.047289807349443436, 0.055168237537145615, 0.024614961817860603, 0.026857960969209671, 0.026502996683120728, 0.041227340698242188, 0.023676089942455292, 0.036144934594631195, 0.061477538198232651, 0.019909640774130821, 0.022114027291536331, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 484, 33043, -1193, 59617, 5218, 129018, -2597, 40661, 5916, 28370, 29953, 5623, -3220, 32723, -516, -2905, -657, 765, 3356, -2541, 30, -2081, 45, -19637, -4242, 33277, 130136, 98953, 3109, 1895, -2297, 145, 26135, -138, 11126, -5303, 39269, 1282, 44718, 2112, -464, 53760, 1065, 1531, 44449, -325, 3346, 48861, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.6002604803070426e-05, 4.3691470636986196e-05, 0.0001512028684373945, 4.1275616240454838e-05, 0.0001398084859829396, 6.3638552092015743e-05, 0.00013991625746712089, 0.0001467954134568572, 6.3724903156980872e-05, 4.1434905142523348e-05, 6.2477018218487501e-05, 8.4253035311121494e-05, 4.9635062168817967e-05, 4.6764973376411945e-05, 0.0001588647864991799, 0.00016544788377359509, 0.00019182472897227854, 7.8333978308364749e-05, 0.00010467026004334912, 0.00012189565313747153, 8.7769301899243146e-05, 0.00017015710182022303, 0.00011336330499034375, 0.00012842682190239429, 9.1112749942112714e-05, 0.00014313517021946609, 3.3208569220732898e-05, 7.2765076765790582e-05, 0.00011816731421276927, 0.00013510057760868222, 0.00011262765474384651, 0.00012951801181770861, 5.6286728067789227e-05, 0.00014895315689500421, 3.6894085496896878e-05, 6.3630810473114252e-05, 0.00014783156802877784, 9.6536168712191284e-05, 0.00012911004887428135, 8.102716674329713e-05, 0.00012635727762244642, 0.00011142907897010446, 8.438507211394608e-05, 0.00010231297346763313, 2.8505248337751254e-05, 0.00015633547445759177, 9.3419250333681703e-05, 2.9873668609070592e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-92,97,70,52,-34,107,-64,60,-89,-80,47,51,-42,-71,-90,102,77,49,78,67,-74,-83,51,-33,-39,-63,-64,-67,62,-62,-114,-14,41,69,63,-65,53,-50,-23,50,-74,58,62,-93,11,75,-33, 82,-96,127,85,-77,-68,-56,-83,96,-102,-63,73,79,-108,-95,92,-37,95,82,127,85,-116,52,71,-52,-77,-68,-80,55,80,-30,-127,-86,78,81,83,-82,82,-83,-16,76,-94,83,89,-74,-127,93,-102, 35,-46,70,37,18,-41,-47,-39,42,-30,5,34,29,-79,-55,-1,-53,36,34,69,34,-55,31,26,-28,-45,-45,-23,31,31,89,-89,-85,44,35,34,-30,39,-36,-10,41,-40,35,42,-6,-9,36,-74, 
  /* [0][1][][] */ 93,-111,-42,94,54,-82,127,-89,86,-112,-72,82,84,-110,-14,-127,127,107,74,-38,84,108,-127,73,73,-74,-93,-99,-127,86,-69,-9,-87,70,107,96,-85,79,-80,89,84,-100,87,90,-89,106,93,-92, 127,-127,-65,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-22,97,-65,127,127,-51,127,127,68,127,127,-127,-127,-127,53,127,-29,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 63,-77,-34,66,37,-62,-49,-63,56,-41,-61,58,49,-54,-17,10,-62,51,58,-30,57,64,50,63,66,-64,-62,-45,36,54,127,14,-61,69,49,48,-48,59,-58,56,60,-57,53,62,-63,-68,58,-56, 
  /* [0][2][][] */ 44,-50,-46,50,26,-53,64,-43,41,-72,-4,39,55,-73,83,-79,72,50,34,-30,26,-11,-76,29,-24,-43,-48,-48,-75,32,-41,89,-73,36,49,43,-27,36,-42,-88,47,-49,40,45,-24,16,40,-74, 71,-74,-48,81,-57,-64,-71,-68,51,-77,-66,60,74,-47,127,33,-47,59,61,-43,55,-18,41,66,-50,-66,-77,-61,31,61,-24,116,-54,64,57,57,-49,60,-66,-106,68,-66,60,62,-87,49,62,-52, 40,-40,-26,46,28,-20,-17,-34,15,-26,-51,27,32,5,67,25,-35,22,28,-32,28,0,39,41,-25,-29,-49,-24,33,33,61,65,1,33,16,22,-23,29,-28,-56,28,-31,25,29,-64,9,30,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036551107186824083, 0.0018568874802440405, 0.006426121573895216, 0.0017542137065902352, 0.005941860843449831, 0.00270463852211833, 0.0059464406222105026, 0.0062388046644628048, 0.0027083083987236023, 0.0017609833739697933, 0.0026552730705589056, 0.0035807539243251085, 0.0021094901021569967, 0.0019875112920999527, 0.0067517533898353577, 0.0070315347984433174, 0.0081525510177016258, 0.003329194150865078, 0.0044484860263764858, 0.0051805651746690273, 0.0037301951088011265, 0.0072316764853894711, 0.0048179402947425842, 0.0054581398144364357, 0.0038722918834537268, 0.0060832444578409195, 0.0014113641809672117, 0.0030925157479941845, 0.0050221108831465244, 0.005741774570196867, 0.0047866753302514553, 0.0055045154877007008, 0.002392185851931572, 0.0063305092044174671, 0.0015679985517635942, 0.0027043095324188471, 0.0062828413210809231, 0.0041027870029211044, 0.0054871770553290844, 0.0034436543937772512, 0.005370184313505888, 0.0047357357107102871, 0.0035863653756678104, 0.0043483013287186623, 0.0012114730197936296, 0.0066442573443055153, 0.0039703180082142353, 0.0012696308549493551, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 768, 1099, 2659, 743, 11672, 18847, 2722, -132, -906, -694, 1383, 1100, 3790, 1416, 30827, 3333, 2390, -1262, -402, 3903, -1969, 13599, 12365, 12730, 7300, 438, 4965, 5377, 10057, -633, 11536, 7246, 646, -284, 5642, 3427, -2100, 477, -867, 6270, 1440, -678, -1137, 98, 1241, 3847, 937, 1169, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00031621844391338527, 0.00062970019644126296, 0.0002099070989061147, 0.00021990748064126819, 0.00018901871226262301, 0.00021532863320317119, 0.00040275446372106671, 0.00017448529251851141, 0.00031557196052744985, 0.00062547926791012287, 0.00074433337431401014, 0.00025047551025636494, 0.00032622995786368847, 0.00053657451644539833, 0.00011657676805043593, 0.00037421638262458146, 0.00020966073498129845, 0.00030523093300871551, 0.00017950631445273757, 0.00023439964570570737, 0.00030240873456932604, 0.00018945323245134205, 0.00029877270571887493, 0.00012230158608872443, 0.00022040892508812249, 0.00022801122395321727, 0.0014040853129699826, 0.00034793003578670323, 0.00017223057511728257, 0.00035496466443873942, 0.00022603900288231671, 0.00016919212066568434, 0.00060543540166690946, 0.00019659221288748085, 0.00065313471714034677, 0.00052910210797563195, 0.00065563840325921774, 0.00025095761520788074, 0.0002087839093292132, 0.00029865035321563482, 0.00012151569535490125, 0.00020945072174072266, 0.00025214362540282309, 0.00020663035684265196, 0.0015727507416158915, 0.00035949147422797978, 0.00025030662072822452, 0.00099828850943595171, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-4,72,-37,46,22,-30, 
  /* [1][0][][] */ 31,73,44,27,14,-48,109,127, 
  /* [2][0][][] */ -38,-3,4,3,-127,-13,9,0, 
  /* [3][0][][] */ 101,2,-9,-127,-126,15,40,-21, 
  /* [4][0][][] */ -127,55,-14,-9,70,-11,42,11, 
  /* [5][0][][] */ -103,-24,20,-4,-127,12,4,78, 
  /* [6][0][][] */ -16,-127,29,-21,16,2,-3,33, 
  /* [7][0][][] */ -69,-3,6,97,127,-33,-35,5, 
  /* [8][0][][] */ 79,3,4,-127,2,-22,-52,-40, 
  /* [9][0][][] */ -10,-127,-4,-2,6,95,-58,85, 
  /* [10][0][][] */ -95,-3,-4,21,-127,70,62,-15, 
  /* [11][0][][] */ 113,8,41,13,-64,-49,-28,-127, 
  /* [12][0][][] */ 2,11,37,-11,10,-72,127,67, 
  /* [13][0][][] */ 72,-33,-8,-17,121,127,125,-38, 
  /* [14][0][][] */ 127,68,-9,13,-105,-18,-37,-28, 
  /* [15][0][][] */ -16,-127,18,-8,6,6,3,35, 
  /* [16][0][][] */ -51,-14,6,-5,-127,2,10,0, 
  /* [17][0][][] */ -30,101,-113,-1,13,-127,112,-81, 
  /* [18][0][][] */ 127,-26,-40,9,-57,23,16,108, 
  /* [19][0][][] */ 127,-54,-21,-1,50,5,26,2, 
  /* [20][0][][] */ 127,19,-11,126,-7,39,-6,-64, 
  /* [21][0][][] */ 12,34,-65,4,-30,96,-127,-92, 
  /* [22][0][][] */ -127,21,34,-1,-34,0,-49,-27, 
  /* [23][0][][] */ -39,-61,2,21,-127,63,81,-14, 
  /* [24][0][][] */ 127,-2,-8,-7,-98,-4,-4,3, 
  /* [25][0][][] */ 20,-9,3,-22,127,48,52,-32, 
  /* [26][0][][] */ 5,-88,2,-34,8,-127,80,-50, 
  /* [27][0][][] */ -16,-127,23,-12,-5,-53,29,-9, 
  /* [28][0][][] */ -96,38,-27,18,-20,-21,127,97, 
  /* [29][0][][] */ -17,48,15,8,4,40,-103,-127, 
  /* [30][0][][] */ 127,-34,4,4,-83,-3,-40,-22, 
  /* [31][0][][] */ -16,-21,68,-18,22,-118,127,67, 
  /* [32][0][][] */ -69,18,3,3,-127,-90,-97,45, 
  /* [33][0][][] */ -23,9,-3,21,-127,-55,-46,19, 
  /* [34][0][][] */ 5,-127,51,-8,-4,84,-73,60, 
  /* [35][0][][] */ -22,-52,-127,-10,-4,-68,46,-51, 
  /* [36][0][][] */ 0,127,57,6,-6,15,-25,-40, 
  /* [37][0][][] */ -127,36,34,-20,60,-26,-14,-109, 
  /* [38][0][][] */ -127,-9,-43,-9,43,26,28,101, 
  /* [39][0][][] */ -4,-34,71,-6,15,-90,127,91, 
  /* [40][0][][] */ -27,-19,-16,-39,-127,103,121,-24, 
  /* [41][0][][] */ -127,43,8,-80,-102,-98,-97,53, 
  /* [42][0][][] */ -45,-125,-99,-3,-6,67,-127,-92, 
  /* [43][0][][] */ -68,4,-19,-127,99,61,65,4, 
  /* [44][0][][] */ 127,-13,17,-92,26,-27,-18,37, 
  /* [45][0][][] */ -23,-127,-8,-13,-7,-64,77,7, 
  /* [46][0][][] */ 118,-9,-8,-27,127,-37,-28,7, 
  /* [47][0][][] */ 127,3,0,118,-1,32,6,-53, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00074813555693253875, 0.0014897965593263507, 0.00049661548109725118, 0.00052027520723640919, 0.00044719601282849908, 0.00050944217946380377, 0.00095286965370178223, 0.00041281164158135653, 0.00074660609243437648, 0.0014798102201893926, 0.001761005143634975, 0.00059259554836899042, 0.00077182165114209056, 0.0012694720644503832, 0.00027580690220929682, 0.00088535191025584936, 0.00049603258958086371, 0.0007221404230222106, 0.00042469080653972924, 0.00055456196423619986, 0.00071546342223882675, 0.00044822401832789183, 0.00070686102844774723, 0.00028935115551576018, 0.00052146153757348657, 0.000539447704795748, 0.0033219004981219769, 0.00082316144835203886, 0.00040747725870460272, 0.00083980459021404386, 0.00053478166228160262, 0.00040028861258178949, 0.0014323887880891562, 0.00046511401887983084, 0.0015452398220077157, 0.0012517932336777449, 0.0015511632664129138, 0.00059373618569225073, 0.00049395812675356865, 0.00070657156175002456, 0.00028749182820320129, 0.00049553572898730636, 0.00059654214419424534, 0.00048886309377849102, 0.003720942884683609, 0.00085051450878381729, 0.00059219595277681947, 0.0023618331179022789, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -42949, 24790, -12830, -12710, 20811, -3478, 30334, 44499, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00047701474977657199, 0.00078635325189679861, 0.0015854986850172281, 0.0016532221343368292, 0.00076375470962375402, 0.00060522952117025852, 0.00078513118205592036, 0.0011076994705945253, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -57,-8,-30,18,10,-25,2,8,-115,127,-39,120,114,8,70,-13,-3,-30,3,0,-13,-4,-19,-40,26,-90,7,63,-8,6,21,-36,-1,-79,113,22,-1,0,-11,-22,121,-7,43,-22,-34,27,-14,-13, 
  /* [1][0][][] */ -4,34,127,7,-5,-23,2,-81,26,1,21,6,-23,8,-9,-113,10,-57,11,4,-27,35,24,-34,-16,-7,12,-3,12,-7,10,0,-5,10,17,15,-13,-32,60,-57,13,33,-8,25,-15,9,25,-5, 
  /* [2][0][][] */ 3,-47,19,-41,33,26,-6,-28,8,-2,-1,12,-11,58,5,1,-37,127,-25,-36,-15,22,-36,-11,120,1,-1,-8,-29,-10,4,-40,-7,-15,-2,10,-11,-1,-15,10,15,-22,-18,-1,-1,24,-27,-37, 
  /* [3][0][][] */ 0,-86,-2,5,3,-8,-11,-1,-6,-15,17,18,11,-10,49,1,-6,-19,3,20,-7,19,-22,5,6,54,0,7,-6,5,127,-1,13,6,-5,-4,-19,-13,-4,13,-7,9,-10,28,-8,-1,-3,32, 
  /* [4][0][][] */ -97,6,-2,-1,-2,-40,2,3,39,-38,23,-19,-35,1,-17,-10,1,6,0,28,8,-25,10,6,-7,50,11,111,-1,1,-5,-28,2,-127,-27,15,2,-9,-3,-3,-54,-1,-11,20,-55,0,7,3, 
  /* [5][0][][] */ -26,23,21,5,-50,10,-2,44,19,4,14,5,-9,-46,2,39,-6,-84,21,5,40,-42,3,41,8,11,-75,-44,-41,-30,17,-3,-4,-69,4,-63,62,12,-49,10,22,-40,0,8,127,-13,-40,-8, 
  /* [6][0][][] */ -24,-28,-20,-6,36,-25,1,-22,-13,-2,27,-14,-14,36,0,-53,-2,-4,3,-27,-38,42,-11,-74,-1,-6,-50,-64,25,44,-19,3,6,-57,-11,63,-64,-50,4,-59,-11,6,17,35,127,-30,44,12, 
  /* [7][0][][] */ 16,31,-75,23,-23,13,4,56,-5,-5,63,-33,8,-30,-11,-6,-19,-127,40,-39,60,37,18,-55,18,-21,22,4,-21,32,-13,2,3,35,-6,-23,-10,-56,-41,-62,-17,-27,37,59,-29,-24,-4,0, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020273126661777496, 0.033420011401176453, 0.067383691668510437, 0.070261940360069275, 0.032459575682878494, 0.025722254067659378, 0.033368073403835297, 0.047077227383852005, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52733, -27, 8132, 196, 5729, -5245, 1194, 20990, 1976, 28241, -2622, 17816, -6585, -957, 25099, 2117, 566, 15350, 32744, 11818, 169, -369, 199, 9719, -8173, 25696, 45994, 35795, 3269, 260, -944, 1417, 640, 17307, -6617, 16571, -11168, 18144, -22252, 99353, 20095, 18580, 12665, -2005, 15788, 3221, 1185, 120, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031708803726360202, 0.00028564865351654589, 0.000195439497474581, 0.00033391313627362251, 0.0001498197962064296, 8.926393638830632e-05, 0.00097406079294160008, 0.00016455145669169724, 0.00010677863610908389, 0.00017172598745673895, 9.6907380793709308e-05, 0.00024247505643870682, 0.00024251524882856756, 0.00019056830205954611, 9.9210752523504198e-05, 0.00071099668275564909, 0.00023117694945540279, 0.00026705485652200878, 7.0693589805159718e-05, 0.00016543100355193019, 0.00020956713706254959, 0.00021792110055685043, 0.00015445092867594212, 0.00020902472897432745, 0.00017270748503506184, 0.0001432688586646691, 0.00061524141347035766, 9.4013870693743229e-05, 0.0001873549772426486, 0.0029966221190989017, 9.9434138974174857e-05, 0.00016706909809727222, 0.0013762216549366713, 0.00016668805619701743, 0.000208125842618756, 0.00015012058429419994, 0.00037375133251771331, 0.00013887690147385001, 0.00027232072898186743, 2.4037017283262685e-05, 0.0001628417958272621, 5.8927063946612179e-05, 0.0001279853458981961, 0.00018054166866932064, 0.00015268685820046812, 0.00011101530981250107, 0.00023200637951958925, 0.00011692739644786343, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-4,20,108,4,81,-1,28,16,8,10,7,-9,-9,-45,9,-2,8,-23,-114,-7,-22,127,-10,-3,6,-6,8,-5,5,16,98,20,28,38,-27,1,35,-2,1,17,-68,-8,-8,17,3,-7,-10, 127,9,15,-127,28,86,11,11,125,127,8,43,-51,-24,5,8,127,-56,-60,-57,-102,25,-109,14,17,70,-32,-84,23,21,10,-124,5,-61,127,10,-40,-46,-6,114,-79,-97,-30,3,-34,-8,-127,23, -31,-3,7,14,0,64,4,18,28,8,-14,31,-14,-3,16,4,-103,29,-4,76,-32,-12,-18,-6,-4,-59,-3,28,-16,5,4,-22,8,-23,16,-19,0,48,41,-12,50,37,-16,11,-44,3,-2,-6, 
  /* [0][1][][] */ 126,6,1,-98,14,-27,35,-16,9,8,-12,53,-7,-1,18,-32,0,-50,-60,-85,9,-73,-124,-18,5,98,-15,-127,-8,33,12,-108,17,-53,-3,127,-3,59,-42,41,-63,-127,39,-87,-45,-14,-12,-5, 27,-127,-127,114,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-41,127,-127,127,127,127,-79,127,127,127,-121,102,107, 54,5,49,-14,6,-61,44,19,-24,14,-104,-8,0,-40,127,4,62,-66,-71,85,13,-45,11,-33,2,5,-38,68,20,40,1,3,32,-44,8,67,-5,65,67,-9,-82,8,-84,-31,27,-16,-11,6, 
  /* [0][2][][] */ -53,-7,26,-17,7,34,-37,23,8,-24,12,33,6,-6,-37,18,4,22,-14,104,5,-32,-16,-12,-3,21,0,51,-10,3,46,-32,-18,-44,-32,-39,-1,31,8,-22,9,-4,42,-37,-37,18,-11,17, 68,126,75,21,16,-21,123,36,18,-3,43,26,-6,-1,-91,25,-58,-56,-37,121,-38,49,12,19,32,-64,-40,30,77,1,127,21,85,-26,7,-35,-25,-17,-13,118,-28,-11,-40,45,20,-32,8,-127, -41,-4,6,-4,5,-6,-62,8,-19,-11,-40,-40,19,-9,-9,11,33,24,-8,-127,23,-10,5,-9,-6,10,-10,-55,-15,8,6,8,-20,87,-37,-22,-4,36,25,-60,4,8,-37,7,-44,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013476241379976273, 0.012140067294239998, 0.0083061782643198967, 0.014191308058798313, 0.0063673411495983601, 0.0037937173619866371, 0.041397582739591599, 0.0069934367202222347, 0.0045380918309092522, 0.0072983540594577789, 0.0041185636073350906, 0.010305189527571201, 0.010306897573173046, 0.0080991527065634727, 0.0042164567857980728, 0.030217358842492104, 0.0098250200971961021, 0.011349831707775593, 0.003004477359354496, 0.0070308176800608635, 0.0089066028594970703, 0.0092616463080048561, 0.0065641645342111588, 0.008883550763130188, 0.0073400679975748062, 0.0060889264568686485, 0.026147760450839996, 0.0039955894462764263, 0.0079625863581895828, 0.12735643982887268, 0.004225950688123703, 0.0071004368364810944, 0.058489419519901276, 0.0070842420682311058, 0.0088453479111194611, 0.0063801244832575321, 0.015884431079030037, 0.0059022679924964905, 0.011573631316423416, 0.0010215732036158442, 0.006920776329934597, 0.00250440021045506, 0.0054393773898482323, 0.0076730209402740002, 0.0064891912043094635, 0.0047181504778563976, 0.009860270656645298, 0.0049694143235683441, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 59921, 7748, 7328, 9065, 1639, 10109, -2035, -269, 803, 2406, 3634, 332, 1693, -813, 728, -2233, 5298, 11805, -272, 28968, 4063, 2853, 7334, -593, 3662, 5706, 28868, 9877, -63, -2804, 132, 2218, -2359, 10191, 3650, 7746, 7847, 5060, 23534, 1879, -763, 2738, 1151, 3913, 4678, 2162, -1483, 2750, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.210790499811992e-05, 0.00029350031400099397, 0.00021104926418047398, 0.00035523937549442053, 0.0013738957932218909, 0.0004998818039894104, 0.00093871698481962085, 0.0010752329835668206, 0.00069379957858473063, 0.00056234601652249694, 0.00061392411589622498, 0.00042317932820878923, 0.00058207451365888119, 0.00057362520601600409, 0.00057725328952074051, 0.0016374411061406136, 0.00030868311296217144, 0.00035852662404067814, 0.0019102857913821936, 9.3963659310247749e-05, 0.00030448220786638558, 0.00034604765824042261, 0.00054152181837707758, 0.00087676086695864797, 0.00033027568133547902, 0.00020575967209879309, 0.00014086755982134491, 0.00037072383565828204, 0.00097288424149155617, 0.00092872767709195614, 0.00051159376744180918, 0.00037718823296017945, 0.00083469162927940488, 0.00021665704844053835, 0.00028962813667021692, 0.00024124416813720018, 0.00046862103044986725, 0.00026632746448740363, 9.9830926046706736e-05, 0.0024131115060299635, 0.00074929144466295838, 0.0010022938949987292, 0.00042920539272017777, 0.00037675612838938832, 0.00025412533432245255, 0.00050804769853129983, 0.00077859347220510244, 0.00096699257846921682, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 71,27,1,-10,127,25,-48,-20, 
  /* [1][0][][] */ -3,-6,1,127,7,-5,5,15, 
  /* [2][0][][] */ 22,-127,-16,44,1,-74,86,15, 
  /* [3][0][][] */ 127,-29,-9,12,-6,-30,32,6, 
  /* [4][0][][] */ 7,-42,127,-12,-8,-47,11,-95, 
  /* [5][0][][] */ 63,6,7,-6,127,6,-2,7, 
  /* [6][0][][] */ -17,89,-15,127,22,49,-69,-51, 
  /* [7][0][][] */ -6,127,-4,2,2,-14,11,-3, 
  /* [8][0][][] */ 127,55,-2,6,-44,-17,-6,-42, 
  /* [9][0][][] */ -127,10,5,20,50,7,-4,6, 
  /* [10][0][][] */ -73,-2,14,127,47,35,-16,-11, 
  /* [11][0][][] */ -127,-4,7,-74,35,13,-18,-43, 
  /* [12][0][][] */ 127,18,2,13,-50,-14,9,-38, 
  /* [13][0][][] */ -8,74,-127,-5,0,99,-69,74, 
  /* [14][0][][] */ -41,-33,-16,127,13,11,-7,-18, 
  /* [15][0][][] */ -5,127,1,-4,0,-15,9,-52, 
  /* [16][0][][] */ -15,-127,-23,3,-6,-112,120,-24, 
  /* [17][0][][] */ 21,127,1,-8,3,76,-92,-17, 
  /* [18][0][][] */ -9,42,-127,-3,5,52,-28,64, 
  /* [19][0][][] */ -69,10,6,3,-127,6,20,27, 
  /* [20][0][][] */ -127,-21,-2,-2,64,-33,49,7, 
  /* [21][0][][] */ -63,-7,-5,1,-127,-3,13,6, 
  /* [22][0][][] */ -127,-25,2,0,80,-18,31,48, 
  /* [23][0][][] */ -24,-23,-4,-8,-2,82,-127,-92, 
  /* [24][0][][] */ -7,39,-127,3,7,46,-21,72, 
  /* [25][0][][] */ 103,-46,0,127,-83,-18,12,-43, 
  /* [26][0][][] */ 0,-17,-2,1,-7,124,127,-32, 
  /* [27][0][][] */ 70,-13,-3,11,127,30,35,-17, 
  /* [28][0][][] */ 1,127,-70,9,3,78,-31,120, 
  /* [29][0][][] */ -6,12,-5,-6,0,86,-127,-83, 
  /* [30][0][][] */ 2,-6,0,-127,-7,2,-4,-14, 
  /* [31][0][][] */ -61,8,6,4,-127,10,13,0, 
  /* [32][0][][] */ -13,38,15,-127,-6,32,-94,-107, 
  /* [33][0][][] */ -68,-9,-3,4,-127,48,45,-1, 
  /* [34][0][][] */ -127,79,10,28,47,-21,5,4, 
  /* [35][0][][] */ -20,127,-13,-7,1,-100,82,-25, 
  /* [36][0][][] */ 0,46,9,-28,-2,99,-127,-26, 
  /* [37][0][][] */ 37,-74,-12,26,18,-125,127,-9, 
  /* [38][0][][] */ 8,-127,5,-4,12,52,-47,73, 
  /* [39][0][][] */ 6,-127,-15,-6,-3,-14,-51,-101, 
  /* [40][0][][] */ 109,47,4,-12,-42,70,-127,-93, 
  /* [41][0][][] */ 12,-120,17,0,-8,74,-53,127, 
  /* [42][0][][] */ 50,-10,-4,-127,-45,-4,6,-25, 
  /* [43][0][][] */ -95,-21,8,-127,63,8,-19,-12, 
  /* [44][0][][] */ 2,-24,-2,11,-35,85,127,-6, 
  /* [45][0][][] */ -127,-38,-1,4,13,10,29,-16, 
  /* [46][0][][] */ 18,85,127,1,-10,7,18,31, 
  /* [47][0][][] */ -1,1,12,127,7,5,7,2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018486949556972831, 0.0007524730172008276, 0.00054108590120449662, 0.00091075903037562966, 0.0035223797895014286, 0.0012815918307751417, 0.0024066728074103594, 0.0027566710487008095, 0.001778756151907146, 0.0014417368220165372, 0.0015739722875878215, 0.0010849427198991179, 0.0014923166017979383, 0.001470654271543026, 0.0014799559721723199, 0.0041980543173849583, 0.00079139851732179523, 0.00091918680118396878, 0.0048975707031786442, 0.00024090305669233203, 0.00078062829561531544, 0.00088719336781650782, 0.0013883480569347739, 0.0022478303872048855, 0.0008467573206871748, 0.00052752450574189425, 0.00036115478724241257, 0.00095045793568715453, 0.0024942704476416111, 0.0023810623679310083, 0.001311618834733963, 0.00096703128656372428, 0.0021399736870080233, 0.00055546307703480124, 0.00074254558421671391, 0.00061849929625168443, 0.0012014457024633884, 0.00068280758569017053, 0.00025594548787921667, 0.0061867102049291134, 0.0019210255704820156, 0.0025696705561131239, 0.0011003923136740923, 0.00096592342015355825, 0.00065152387833222747, 0.0013025273801758885, 0.0019961497746407986, 0.0024791655596345663, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -3865, -24982, 24375, 21680, 3491, 532, 37534, 10915, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013781675370410085, 0.00069221487501636147, 0.0016875483561307192, 0.0012883862946182489, 0.0010108028072863817, 0.0012134700082242489, 0.00083996780449524522, 0.00068121368531137705, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,-1,8,-90,12,26,7,5,3,4,4,-4,94,0,2,7,0,-10,-3,1,74,-4,0,2,27,35,12,10,5,5,4,-127,9,4,2,1,-29,3,-16,32,8,-28,-6,3,3,-4,5,3, 
  /* [1][0][][] */ -35,-9,-2,-4,42,26,-30,75,21,6,-31,-24,11,0,20,35,0,38,18,-44,0,21,127,22,-27,-3,52,6,19,-3,15,-11,12,-8,-11,-18,3,-54,9,5,-6,-9,-78,-6,-30,8,-48,-95, 
  /* [2][0][][] */ -58,15,0,11,41,-11,27,26,-10,55,7,-8,3,0,8,50,0,14,-127,22,3,14,8,-13,-31,0,39,7,8,28,22,5,7,-5,-13,-13,11,6,4,2,35,-7,-31,2,24,-56,23,14, 
  /* [3][0][][] */ 1,2,0,8,-6,26,-1,-4,65,17,-1,0,29,0,-31,-8,0,-2,-10,3,-5,0,6,-20,-14,-5,-10,-2,-8,-3,0,-10,-49,44,-54,0,4,-1,5,-127,-1,5,3,-53,1,-1,1,9, 
  /* [4][0][][] */ 1,-4,79,38,5,-21,-4,0,3,-2,-3,-12,-84,0,-11,4,0,12,6,-2,70,6,4,-2,-16,29,-3,45,-5,-3,0,104,6,5,-1,-5,18,-15,-14,-18,-5,-127,2,6,-1,-4,-1,-2, 
  /* [5][0][][] */ -5,45,6,-6,3,48,24,14,-21,31,6,52,23,0,-127,-1,0,15,-40,20,-9,10,-11,42,-21,-3,29,-2,-14,20,22,-17,49,30,-39,-6,3,17,-45,16,24,-14,-12,29,20,60,21,21, 
  /* [6][0][][] */ -22,-53,3,8,41,-49,-19,11,25,-24,-14,88,-5,0,-127,42,0,-8,47,-21,-6,1,26,-31,29,0,-5,-13,46,-12,-13,-4,92,-31,26,-3,-2,-9,-71,-24,-13,-16,-6,-25,-23,-82,-20,-29, 
  /* [7][0][][] */ -113,-23,-13,7,127,16,66,26,14,4,28,-37,-29,0,87,105,0,10,2,60,-13,-3,-32,47,16,5,45,4,53,64,57,-10,-11,-19,-22,-24,8,24,26,34,75,2,-28,-11,58,4,65,79, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.05857212096452713, 0.029419131577014923, 0.071720801293849945, 0.054756414145231247, 0.042959116399288177, 0.051572475582361221, 0.035698629915714264, 0.028951581567525864, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 70309, 59551, 61871, 42933, -266, 13798, 3101, 26870, 25103, 22932, 29567, 4609, -47105, -127, 43642, 528, -204, 27510, 2398, 1866, -15891, 1551, 50140, 31272, -17377, 27585, 35786, 21133, -2466, 14601, -7941, -49812, 13089, 95824, 28114, 1792, 51617, -255, 142343, -25119, 14513, -27741, 3038, 96672, -1606, 76164, 1189, -22647, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.5637293523177505e-05, 6.5887652453966439e-05, 0.00015198442270047963, 0.00012612005230039358, 0.00014777782780583948, 0.00016663003771100193, 0.00012387496826704592, 5.7514644140610471e-05, 9.1000234533566982e-05, 3.4376676921965554e-05, 8.6251820903271437e-05, 2.7428770408732817e-05, 0.00017696760187391192, 0.005541567225009203, 5.88122675253544e-05, 0.00020624817989300936, 0.0027484172023832798, 2.2963116862229072e-05, 9.248489368474111e-05, 0.00015893462114036083, 0.00011651953536784276, 0.00016235755174420774, 0.00011481728142825887, 3.9038721297401935e-05, 7.6904398156329989e-05, 0.00010277689580107108, 3.5233471862738952e-05, 4.3179432395845652e-05, 0.00028323743026703596, 5.6751006923150271e-05, 4.730611908598803e-05, 0.00018321277457289398, 0.00018918076239060611, 9.8950631581828929e-06, 9.0008194092661142e-05, 0.00016293705266434699, 1.9064202206209302e-05, 0.00043270524474792182, 3.2827912946231663e-05, 8.8112217781599611e-05, 6.7803026468027383e-05, 0.00020351901184767485, 0.00010460581688676029, 1.032625550578814e-05, 0.00015327506116591394, 7.6891039498150349e-05, 0.00019651876937132329, 0.00011903614358743653, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-17,7,-40,-79,-69,-27,-50,8,66,34,-71,115,-43,-113,-84,37,-6,-2,-71,-111,-79,-35,-125,-63,-20,71,15,95,26,-127,-88,-7,54,18,48,-127,78,-76,-14,105,-109,-3,-34,-87,108, 75,12,-28,-28,58,-127,-127,-81,61,-76,-115,109,37,-82,-1,62,-52,-113,59,7,11,-111,-127,-70,-5,-127,-120,-40,-54,21,-57,54,28,-127,65,84,13,72,-93,127,-127,6,125,-127,2,-22,-127,95, -32,43,7,-5,-64,-108,-58,-18,88,-7,-127,38,9,-71,-101,-11,-127,-25,27,12,-16,-76,-36,-23,-11,-30,-58,-11,-10,18,-24,9,106,-86,70,32,14,36,-5,16,-78,3,7,-79,-17,6,-55,15, 
  /* [0][1][][] */ -85,-127,-44,-44,-10,54,98,-105,-27,-107,-20,113,90,-64,27,-96,-121,-93,90,-77,41,-88,-103,-127,42,-117,-78,-37,127,-60,127,83,-44,-85,-14,84,-35,-77,-107,89,42,59,104,-108,-91,-117,81,120, 127,-83,-127,-127,127,40,93,-127,100,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-119,127,-98,-127,-127,-120,-127,-71,127,28,-111,127,127,-68,-127,-97,90,61,127,127,-118,-112,-127,125,127, -53,30,-61,-85,-119,-23,31,-38,127,-20,-77,35,57,-70,-25,-43,-37,-30,54,-71,56,-81,-39,-23,48,-5,-46,-59,15,-89,-35,20,29,-99,118,24,-36,-62,1,-15,37,54,11,-74,-57,-37,65,35, 
  /* [0][2][][] */ -61,-108,-34,-35,0,34,-5,-34,-39,-59,-16,59,77,-127,-127,-64,-43,-18,64,75,52,-33,-12,-60,33,-54,-10,-59,75,29,77,61,107,-27,-38,-9,-95,35,-17,30,9,38,15,-56,96,-77,4,32, 88,-74,-88,-86,81,19,7,-47,47,-71,-32,55,83,-26,16,92,-24,-31,77,117,82,-53,-18,-57,94,-66,-18,-100,-50,40,-45,111,-18,-49,67,6,-127,50,-15,-1,11,32,15,-66,127,-100,-12,41, -29,29,-41,-37,-79,-18,22,-12,59,-4,-13,31,32,-43,112,-29,-93,-5,30,60,74,-28,-1,-2,43,3,-4,-64,-13,29,-20,39,-90,-43,65,3,-21,21,27,-38,7,36,-5,-15,63,-34,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036395848728716373, 0.0028002252802252769, 0.0064593376591801643, 0.0053601018153131008, 0.0062805577181279659, 0.0070817763917148113, 0.0052646859548985958, 0.0024443722795695066, 0.0038675100076943636, 0.0014610087964683771, 0.0036657024174928665, 0.0011657227296382189, 0.0075211231596767902, 0.23551659286022186, 0.0024995212443172932, 0.0087655475363135338, 0.1168077290058136, 0.00097593246027827263, 0.0039306078106164932, 0.0067547215148806572, 0.0049520800821483135, 0.0069001959636807442, 0.0048797344788908958, 0.0016591455787420273, 0.003268436761572957, 0.0043680178932845592, 0.0014974224613979459, 0.0018351258477196097, 0.012037591077387333, 0.0024119177833199501, 0.0020105100702494383, 0.0077865426428616047, 0.0080401822924613953, 0.00042054019286297262, 0.0038253481034189463, 0.0069248247891664505, 0.0008102285792119801, 0.018389971926808357, 0.0013951862929388881, 0.0037447691429406404, 0.0028816286940127611, 0.0086495578289031982, 0.0044457470066845417, 0.00043886585626751184, 0.0065141902305185795, 0.0032678691204637289, 0.0083520477637648582, 0.0050590359605848789, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 5266, 113, 12275, 8388, 8489, 8245, 11046, -53, 27, -387, 2947, 558, 15947, -98566328, 3321, 20702, -79567856, -139, -614, 13577, 5208, -24, -55, 525, 4308, -1029, 79, 889, 4959, 2282, 2973, 16140, 4944, 389, 310, -2176, 358, 4217, -164, 14401, 2875, 15177, -348, -106, 16231, 189, 9906, 5738, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00039989157812669873, 0.00039456033846363425, 0.00025649578310549259, 0.00022727588657289743, 0.00023340720508713275, 0.00025188727886416018, 0.00034610205329954624, 0.0011484032729640603, 0.00033499568235129118, 0.0019515221938490868, 0.00050587317673489451, 0.0015310629969462752, 0.0001398297754349187, 1.6454264617493664e-09, 0.00078954559285193682, 0.00015893958334345371, 1.6454264617493664e-09, 0.0052653811872005463, 0.00033428077585995197, 0.00028599286451935768, 0.00021005464077461511, 0.0036149097140878439, 0.00025145342806354165, 0.0012218797346577048, 0.00087805534712970257, 0.00055088347289711237, 0.0017878297949209809, 0.0013829255476593971, 0.00022650428581982851, 0.0012851145584136248, 0.0009917084826156497, 0.00014401886437553912, 0.00015698664356023073, 0.008353319950401783, 0.00040445569902658463, 0.00054270884720608592, 0.0042714644223451614, 0.00030290486756712198, 0.0022335806861519814, 0.0002401676174486056, 0.00098383659496903419, 0.00014676430146209896, 0.00050160818500444293, 0.0079203145578503609, 0.00031007893267087638, 0.00042204590863548219, 0.00028338763513602316, 0.0001524649269413203, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,51,-44,29,-18,-50,23, 
  /* [1][0][][] */ 74,68,-23,-98,13,-9,-78,127, 
  /* [2][0][][] */ 31,5,-46,126,49,127,50,92, 
  /* [3][0][][] */ 85,74,-78,127,-100,-5,-11,14, 
  /* [4][0][][] */ -35,-102,74,8,3,30,-47,-127, 
  /* [5][0][][] */ 21,3,-36,43,5,-35,38,127, 
  /* [6][0][][] */ 54,-21,-127,-95,107,16,50,-40, 
  /* [7][0][][] */ 127,17,20,-26,26,-6,87,-58, 
  /* [8][0][][] */ 20,-96,14,101,-2,28,-11,-127, 
  /* [9][0][][] */ 103,-127,11,3,-16,16,-115,88, 
  /* [10][0][][] */ -127,-37,-115,25,-12,8,-96,44, 
  /* [11][0][][] */ -24,-46,-9,-110,-127,-38,49,-20, 
  /* [12][0][][] */ 17,8,-35,63,-80,-21,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-31,-6,11,43,127,45,42, 
  /* [15][0][][] */ 40,4,19,-127,61,42,-54,69, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 14,24,127,22,-31,-14,31,32, 
  /* [18][0][][] */ 84,-127,24,30,-7,23,-118,0, 
  /* [19][0][][] */ -127,-17,24,80,-56,-65,-101,72, 
  /* [20][0][][] */ 40,36,-41,118,-21,-127,-6,69, 
  /* [21][0][][] */ 57,22,127,8,-15,-12,67,12, 
  /* [22][0][][] */ -78,-15,-127,2,1,10,-102,4, 
  /* [23][0][][] */ -101,124,-22,-19,7,-11,127,-75, 
  /* [24][0][][] */ 7,-54,-50,81,-12,-56,97,127, 
  /* [25][0][][] */ 11,42,30,27,127,127,-76,-51, 
  /* [26][0][][] */ -83,-31,-127,-3,5,12,-88,1, 
  /* [27][0][][] */ -2,-27,-35,5,-50,127,71,49, 
  /* [28][0][][] */ 6,-21,-21,37,24,127,50,61, 
  /* [29][0][][] */ 92,26,127,3,-19,-16,92,-5, 
  /* [30][0][][] */ -81,127,-24,-28,10,-7,97,-48, 
  /* [31][0][][] */ -44,-96,-23,9,31,-65,127,102, 
  /* [32][0][][] */ 5,9,-50,117,-9,91,89,127, 
  /* [33][0][][] */ 1,63,-14,-106,13,-10,-13,127, 
  /* [34][0][][] */ -26,85,-10,-93,30,-10,15,127, 
  /* [35][0][][] */ 127,8,-14,-40,16,30,103,-41, 
  /* [36][0][][] */ -127,-3,31,53,-40,17,-112,74, 
  /* [37][0][][] */ -5,-20,-9,24,26,127,52,48, 
  /* [38][0][][] */ 10,18,5,81,127,-7,-18,29, 
  /* [39][0][][] */ 3,29,38,-127,29,-5,-43,117, 
  /* [40][0][][] */ 93,29,127,0,-12,-10,96,-7, 
  /* [41][0][][] */ 3,-29,-28,81,47,127,72,102, 
  /* [42][0][][] */ -78,-7,127,21,-36,15,-28,62, 
  /* [43][0][][] */ -13,-51,8,98,-19,6,15,-127, 
  /* [44][0][][] */ 32,-5,-69,-127,60,-18,-7,-108, 
  /* [45][0][][] */ -90,127,-4,-50,10,2,76,-56, 
  /* [46][0][][] */ -127,-24,34,25,-29,34,-88,40, 
  /* [47][0][][] */ 112,24,127,-1,33,-25,126,-15, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00095681968377903104, 0.0009440636495128274, 0.00061371689662337303, 0.00054380251094698906, 0.00055847287876531482, 0.00060269009554758668, 0.00082811759784817696, 0.0027477818075567484, 0.00080154341412708163, 0.0046694027259945869, 0.0012104015331715345, 0.0036633708514273167, 0.00033457038807682693, 3.937008052901092e-09, 0.0018891439540311694, 0.00038029436836950481, 3.937008052901092e-09, 0.012598465196788311, 0.00079983286559581757, 0.00068429450038820505, 0.00050259724957868457, 0.008649386465549469, 0.00060165207833051682, 0.0029235887341201305, 0.0021009210031479597, 0.0013180976966395974, 0.0042777364142239094, 0.0033089227508753538, 0.0005419562803581357, 0.0030748907011002302, 0.0023728585802018642, 0.00034459360176697373, 0.00037562157376669347, 0.019986970350146294, 0.00096774025587365031, 0.001298538176342845, 0.010220322757959366, 0.00072475976776331663, 0.0053442833013832569, 0.00057464849669486284, 0.0023540235124528408, 0.00035116259823553264, 0.0012001967988908291, 0.018950918689370155, 0.00074192514875903726, 0.0010098282946273685, 0.00067806092556566, 0.00036480248672887683, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1023, -44090, -7530, -12717, -31424, -1971, -24773, -27396, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0020959973335266113, 0.0025089513510465622, 0.0023622997105121613, 0.0012128402013331652, 0.0010890006087720394, 0.0020227236673235893, 0.0015183172654360533, 0.0010320941219106317, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,3,0,125,2,-4,1,-2,-127,-93,-7,0,126,-3,0, 
  /* [1][0][][] */ 0,-31,0,89,75,15,26,7,1,-7,127,-42,0,28,-13,0, 
  /* [2][0][][] */ 0,2,-2,-12,-61,2,13,1,0,1,-17,1,0,127,-9,0, 
  /* [3][0][][] */ 0,-13,-22,-127,84,25,67,17,-2,64,-3,38,0,2,22,0, 
  /* [4][0][][] */ 0,51,-29,33,-54,30,127,9,1,-64,18,-9,0,-10,18,0, 
  /* [5][0][][] */ 0,-18,-12,0,-22,-23,-14,17,-1,10,-4,-44,0,-5,127,0, 
  /* [6][0][][] */ 0,16,-2,2,52,-21,-26,-7,1,-103,111,62,0,127,62,0, 
  /* [7][0][][] */ 0,11,-14,127,8,0,15,10,-1,68,-54,75,0,-7,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.089079886674880981, 0.10663042962551117, 0.1003977358341217, 0.051545705646276474, 0.046282526105642319, 0.085965752601623535, 0.064528480172157288, 0.043863996863365173, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 9174, 100635, 10946, 11357, 18376, 14454, 4787, -1339, 6482, 29706, 14324, -445, 25511, 10067, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00028357061091810465, 3.9905433368403465e-05, 0.00032052330789156258, 0.00016016862355172634, 0.00018073612591251731, 0.00036179530434310436, 0.00081414153100922704, 3.1557923648506403e-05, 0.00027911175857298076, 0.0002006587601499632, 0.00074658641824498773, 0.00072724185883998871, 0.00026402619550935924, 0.00020715278515126556, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-127,39,-67,80,-76,-89,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,77,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-27,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,70,2,-6,39,-39,52,-76,0,0,5,40,2,-27,23, 23,-4,32,-2,-27,40,-34,20,-125,-13,0,85,-58,0,-29,-111, 21,-7,20,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.012051750905811787, 0.0016959808999672532, 0.013622240163385868, 0.006807166151702404, 0.0076812850311398506, 0.015376300550997257, 0.034601014107465744, 0.0013412117259576917, 0.011862249113619328, 0.0085279969498515129, 0.031729921698570251, 0.030907778069376945, 0.011221112683415413, 0.0088039934635162354, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 4930, -65445, 42614, 296426, -8399, 75882, -10690, 184049, 51786, 30469, 627410, -1073741824, 56948, 55057, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00018491165246814489, 0.00020824442617595196, 4.3063704652013257e-05, 1.2305726158956531e-05, 0.00021616557205561548, 4.6070603275438771e-05, 0.00029737522709183395, 6.4268820096913259e-06, 4.7820587496971712e-05, 9.7947508038487285e-05, 9.0327812358736992e-06, 1.1533876076441629e-09, 6.6553977376315743e-05, 4.7582536353729665e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 43,-5,27, -7,-24,12, -127,-116,-68, 
  /* [1][1][][] */ 1,-6,-3, -23,1,-7, -2,-31,4, 
  /* [1][2][][] */ -6,15,-3, -7,5,-4, 36,-18,13, 
  /* [2][0][][] */ 28,-10,-9, 74,109,-2, 41,-40,7, 
  /* [2][1][][] */ 13,14,-1, 73,127,-29, 25,-2,-5, 
  /* [2][2][][] */ 53,-64,22, 78,-41,-20, 36,-52,16, 
  /* [3][0][][] */ 6,33,2, 33,94,19, -1,4,-7, 
  /* [3][1][][] */ 22,36,6, 69,127,26, -16,-21,1, 
  /* [3][2][][] */ 8,4,5, 27,26,8, -4,-7,0, 
  /* [4][0][][] */ 43,76,-10, 21,87,-10, -16,9,-7, 
  /* [4][1][][] */ 50,96,48, 42,127,29, 32,53,-19, 
  /* [4][2][][] */ 54,73,28, 50,121,11, -18,23,17, 
  /* [5][0][][] */ 10,4,-118, -2,3,-105, -4,30,-25, 
  /* [5][1][][] */ 7,-40,-127, -1,-44,-118, 0,14,-23, 
  /* [5][2][][] */ -3,9,-18, 1,-3,-12, 2,14,-9, 
  /* [6][0][][] */ 24,-65,33, 47,-90,39, 8,-22,7, 
  /* [6][1][][] */ 39,-95,63, 66,-127,73, 9,-27,17, 
  /* [6][2][][] */ 24,-32,15, 17,-42,28, -9,11,1, 
  /* [7][0][][] */ -28,19,3, -109,-39,-1, -26,22,0, 
  /* [7][1][][] */ -10,-5,0, -127,-93,-9, -7,-6,4, 
  /* [7][2][][] */ -19,35,-9, -10,13,-2, -21,27,-4, 
  /* [8][0][][] */ -63,-66,-117, -66,-68,-119, -28,-29,-84, 
  /* [8][1][][] */ -61,-66,-117, -66,-70,-120, -22,-24,-82, 
  /* [8][2][][] */ -78,-83,-124, -83,-86,-127, -58,-65,-124, 
  /* [9][0][][] */ -20,-2,10, -12,-5,1, 6,6,-6, 
  /* [9][1][][] */ 95,113,-6, 76,127,19, -4,21,30, 
  /* [9][2][][] */ -21,-19,19, 7,-26,3, 14,7,-17, 
  /* [10][0][][] */ -24,-83,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -18,-30,-3, 5,-48,3, 5,-109,-59, 
  /* [11][1][][] */ -53,-48,-23, -41,-70,-42, -20,-67,-60, 
  /* [11][2][][] */ -13,-46,-87, 117,127,61, -46,9,-54, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-110,-24, -9,-17,-5, 
  /* [13][1][][] */ 61,114,15, 58,127,25, 7,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-1, 0,4,-4, 
  /* [14][0][][] */ 46,-4,-35, 77,-25,-50, 31,-9,-20, 
  /* [14][1][][] */ 91,-14,-71, 127,-38,-86, 59,-17,-36, 
  /* [14][2][][] */ 57,-6,-42, 75,-19,-51, 26,-5,-17, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.5498331385497295e-07, 0.050099499523639679, 0.056421224027872086, 0.01166757196187973, 0.0033340826630592346, 0.058567360043525696, 0.012482253834605217, 0.080570101737976074, 0.0017412833403795958, 0.012956390157341957, 0.026537653058767319, 0.0024473192170262337, 3.1249595622284687e-07, 0.018031967803835869, 0.012891893275082111, 3.3687683753669262e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.41793829202651978, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.39004760980606079, } };
const TfArray<1, int> quant50_zero = { 1, { 29 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.53546142578125, } };
const TfArray<1, int> quant53_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.42267531156539917, } };
const TfArray<1, int> quant54_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28996694087982178, } };
const TfArray<1, int> quant58_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20157225430011749, } };
const TfArray<1, int> quant61_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.30593964457511902, } };
const TfArray<1, int> quant62_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.20450858771800995, } };
const TfArray<1, int> quant65_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.38402125239372253, } };
const TfArray<1, int> quant66_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.075837232172489166, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.081529803574085236, } };
const TfArray<1, int> quant69_zero = { 1, { 34 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension69, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
